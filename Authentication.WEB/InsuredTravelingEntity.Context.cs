//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace InsuredTraveling
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class InsuredTravelingEntity : DbContext
    {
        public InsuredTravelingEntity()
            : base("name=InsuredTravelingEntity")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<additional_charge> additional_charge { get; set; }
        public virtual DbSet<additional_info> additional_info { get; set; }
        public virtual DbSet<aspnetrole> aspnetroles { get; set; }
        public virtual DbSet<aspnetuserclaim> aspnetuserclaims { get; set; }
        public virtual DbSet<bank_account_info> bank_account_info { get; set; }
        public virtual DbSet<bank_prefix> bank_prefix { get; set; }
        public virtual DbSet<bank> banks { get; set; }
        public virtual DbSet<client> clients { get; set; }
        public virtual DbSet<company> companies { get; set; }
        public virtual DbSet<country> countries { get; set; }
        public virtual DbSet<discount_age> discount_age { get; set; }
        public virtual DbSet<discount_country> discount_country { get; set; }
        public virtual DbSet<discount_days> discount_days { get; set; }
        public virtual DbSet<discount_family> discount_family { get; set; }
        public virtual DbSet<discount_group> discount_group { get; set; }
        public virtual DbSet<document> documents { get; set; }
        public virtual DbSet<documents_first_notice_of_loss> documents_first_notice_of_loss { get; set; }
        public virtual DbSet<exchange_rate> exchange_rate { get; set; }
        public virtual DbSet<first_notice_of_loss> first_notice_of_loss { get; set; }
        public virtual DbSet<group> groups { get; set; }
        public virtual DbSet<health_insurance> health_insurance { get; set; }
        public virtual DbSet<health_insurance_info> health_insurance_info { get; set; }
        public virtual DbSet<invoice> invoices { get; set; }
        public virtual DbSet<luggage_insurance> luggage_insurance { get; set; }
        public virtual DbSet<luggage_insurance_info> luggage_insurance_info { get; set; }
        public virtual DbSet<min_premium> min_premium { get; set; }
        public virtual DbSet<news_all> news_all { get; set; }
        public virtual DbSet<p_referent> p_referent { get; set; }
        public virtual DbSet<p_stapki> p_stapki { get; set; }
        public virtual DbSet<policy_additional_charge> policy_additional_charge { get; set; }
        public virtual DbSet<policy_insured> policy_insured { get; set; }
        public virtual DbSet<policy_status> policy_status { get; set; }
        public virtual DbSet<policy_type> policy_type { get; set; }
        public virtual DbSet<refreshtoken> refreshtokens { get; set; }
        public virtual DbSet<retaining_risk> retaining_risk { get; set; }
        public virtual DbSet<travel_duration> travel_duration { get; set; }
        public virtual DbSet<travel_insurance_type> travel_insurance_type { get; set; }
        public virtual DbSet<travel_number> travel_number { get; set; }
        public virtual DbSet<type_insured> type_insured { get; set; }
        public virtual DbSet<user> users { get; set; }
        public virtual DbSet<aspnetuserlogin> aspnetuserlogins { get; set; }
        public virtual DbSet<transaction> transactions { get; set; }
        public virtual DbSet<payment_status> payment_status { get; set; }
        public virtual DbSet<language> languages { get; set; }
        public virtual DbSet<additional_charge_name> additional_charge_name { get; set; }
        public virtual DbSet<countries_name> countries_name { get; set; }
        public virtual DbSet<policy_type_name> policy_type_name { get; set; }
        public virtual DbSet<retaining_risk_name> retaining_risk_name { get; set; }
        public virtual DbSet<chat_requests> chat_requests { get; set; }
        public virtual DbSet<message> messages { get; set; }
        public virtual DbSet<first_notice_of_loss_archive> first_notice_of_loss_archive { get; set; }
        public virtual DbSet<discount_codes> discount_codes { get; set; }
        public virtual DbSet<aspnetuser> aspnetusers { get; set; }
        public virtual DbSet<ok_setup> ok_setup { get; set; }
        public virtual DbSet<broker_employees> broker_employees { get; set; }
        public virtual DbSet<travel_policy> travel_policy { get; set; }
        public virtual DbSet<insured> insureds { get; set; }
        public virtual DbSet<log_activities> log_activities { get; set; }
        public virtual DbSet<elmah_error> elmah_error { get; set; }
        public virtual DbSet<aspnetusers_log> aspnetusers_log { get; set; }
        public virtual DbSet<first_notice_of_loss_log> first_notice_of_loss_log { get; set; }
        public virtual DbSet<quote> quotes { get; set; }
        public virtual DbSet<quotes_log> quotes_log { get; set; }
        public virtual DbSet<travel_policy_log> travel_policy_log { get; set; }
        public virtual DbSet<insured_log> insured_log { get; set; }
    
        public virtual ObjectResult<elmah_GetErrorsXml_Result> elmah_GetErrorsXml(string app, Nullable<int> pageIndex, Nullable<int> pageSize, ObjectParameter totalCount)
        {
            var appParameter = app != null ?
                new ObjectParameter("App", app) :
                new ObjectParameter("App", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<elmah_GetErrorsXml_Result>("elmah_GetErrorsXml", appParameter, pageIndexParameter, pageSizeParameter, totalCount);
        }
    
        public virtual int elmah_LogError(string errorId, string application, string host, string type, string source, string message, string user, string allXml, Nullable<int> statusCode, Nullable<System.DateTime> timeUtc)
        {
            var errorIdParameter = errorId != null ?
                new ObjectParameter("ErrorId", errorId) :
                new ObjectParameter("ErrorId", typeof(string));
    
            var applicationParameter = application != null ?
                new ObjectParameter("Application", application) :
                new ObjectParameter("Application", typeof(string));
    
            var hostParameter = host != null ?
                new ObjectParameter("Host", host) :
                new ObjectParameter("Host", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var sourceParameter = source != null ?
                new ObjectParameter("Source", source) :
                new ObjectParameter("Source", typeof(string));
    
            var messageParameter = message != null ?
                new ObjectParameter("Message", message) :
                new ObjectParameter("Message", typeof(string));
    
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            var allXmlParameter = allXml != null ?
                new ObjectParameter("AllXml", allXml) :
                new ObjectParameter("AllXml", typeof(string));
    
            var statusCodeParameter = statusCode.HasValue ?
                new ObjectParameter("StatusCode", statusCode) :
                new ObjectParameter("StatusCode", typeof(int));
    
            var timeUtcParameter = timeUtc.HasValue ?
                new ObjectParameter("TimeUtc", timeUtc) :
                new ObjectParameter("TimeUtc", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("elmah_LogError", errorIdParameter, applicationParameter, hostParameter, typeParameter, sourceParameter, messageParameter, userParameter, allXmlParameter, statusCodeParameter, timeUtcParameter);
        }
    
        public virtual ObjectResult<elmah_GetErrorsXml1_Result> elmah_GetErrorsXml1(string app, Nullable<int> pageIndex, Nullable<int> pageSize, ObjectParameter totalCount)
        {
            var appParameter = app != null ?
                new ObjectParameter("App", app) :
                new ObjectParameter("App", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<elmah_GetErrorsXml1_Result>("elmah_GetErrorsXml1", appParameter, pageIndexParameter, pageSizeParameter, totalCount);
        }
    
        public virtual int elmah_LogError1(string errorId, string application, string hOST, string tYPE, string sOURCE, string message, string uSER, string allXml, Nullable<int> statusCode, Nullable<System.DateTime> timeUtc)
        {
            var errorIdParameter = errorId != null ?
                new ObjectParameter("ErrorId", errorId) :
                new ObjectParameter("ErrorId", typeof(string));
    
            var applicationParameter = application != null ?
                new ObjectParameter("Application", application) :
                new ObjectParameter("Application", typeof(string));
    
            var hOSTParameter = hOST != null ?
                new ObjectParameter("HOST", hOST) :
                new ObjectParameter("HOST", typeof(string));
    
            var tYPEParameter = tYPE != null ?
                new ObjectParameter("TYPE", tYPE) :
                new ObjectParameter("TYPE", typeof(string));
    
            var sOURCEParameter = sOURCE != null ?
                new ObjectParameter("SOURCE", sOURCE) :
                new ObjectParameter("SOURCE", typeof(string));
    
            var messageParameter = message != null ?
                new ObjectParameter("Message", message) :
                new ObjectParameter("Message", typeof(string));
    
            var uSERParameter = uSER != null ?
                new ObjectParameter("USER", uSER) :
                new ObjectParameter("USER", typeof(string));
    
            var allXmlParameter = allXml != null ?
                new ObjectParameter("AllXml", allXml) :
                new ObjectParameter("AllXml", typeof(string));
    
            var statusCodeParameter = statusCode.HasValue ?
                new ObjectParameter("StatusCode", statusCode) :
                new ObjectParameter("StatusCode", typeof(int));
    
            var timeUtcParameter = timeUtc.HasValue ?
                new ObjectParameter("TimeUtc", timeUtc) :
                new ObjectParameter("TimeUtc", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("elmah_LogError1", errorIdParameter, applicationParameter, hOSTParameter, tYPEParameter, sOURCEParameter, messageParameter, uSERParameter, allXmlParameter, statusCodeParameter, timeUtcParameter);
        }
    }
}
