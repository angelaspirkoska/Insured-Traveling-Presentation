@model InsuredTraveling.Models.FirstNoticeOfLossReportViewModel

@{
    ViewBag.Title = "First Notice of Loss";
}


<form style="margin-top:80px;" method="post" action="@Url.Action("Index")">
    <div class="form-horizontal">
        <div class="row container">
            @if (ViewBag.Message != null)
            {
                if (ViewBag.Message == "Something went wrong!")
                {
                    <div class="row" style="width:35%;">
                        <div class="alert alert-dismissible alert-danger" style="margin-top: 27%; margin-left:12px; width:211%">
                            <button type="button" class="close" data-dismiss="alert">&times;</button>
                            <strong>Oh snap!</strong> <span>@ViewBag.Message</span>
                        </div>
                    </div>
                }
                else
                {
                    <div class="row" style="width:35%;">
                        <div class="alert alert-dismissible alert-success" style="margin-top: 27%;margin-left:12px; width:211%">
                            <button type="button" class="close" data-dismiss="alert">&times;</button>
                            <strong>Great!</strong> <span>@ViewBag.Message</span>
                        </div>
                    </div>
                }
            }
        </div>

        <h3>Пријави штета</h3>
        <br />
        <br />
        <div><h5>Задолжителни полиња  <span class="glyphicon glyphicon-star small" aria-hidden="true" style="color:red"> </span>  </h5></div>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="row container">
            <div class="col-md-6 col-md-offset-6">
                <div class="form-group">
                    <span class="glyphicon glyphicon-star small" aria-hidden="true" style="color:red"></span><label class="col-md-4 control-label">Број на полиса:</label>
                    <div class="col-lg-7">
                        @Html.TextBoxFor(model => model.PolicyId, new { @class = "form-control input-sm", @id = "PolicyId", @style = "display: none;" })
                        
                        @Html.DropDownListFor(model => model.PolicyNumber, (List<SelectListItem>)ViewBag.Policies, "Број на полиса", new { @class = "form-control", @id = "DropDownPolicyNumber" })

                        @Html.ValidationMessageFor(model => model.PolicyNumber, "", new { @class = "text-danger input-sm" })
                    </div>
                </div>
            </div>
        </div>
        <div class="row container">
            <header class="well">Податоци за договорувач</header>
            <div class="col-md-6">
                <div class="form-group">
                    <label class="col-md-4 control-label">Договорувач:</label>
                    <div class="col-lg-8">
                        @Html.TextBoxFor(model => model.PolicyHolderName, new { @class = "form-control input-sm", @id = "PolicyHolderName", @readonly = true })  
                       
                    </div>
                </div>
                @Html.TextBoxFor(model => model.PolicyHolderId, new { @class = "form-control input-sm", @id = "PolicyHolderId", @style = "display: none;" })
                
                <div class="form-group">
                    <label class="col-md-4 control-label">Адреса:</label>
                    <div class="col-lg-8">
                        @Html.TextBoxFor(model => model.PolicyHolderAdress, new { @class = "form-control input-sm", @id = "PolicyHolderAddress", @readonly = true })                       
                    </div>
                </div>  
                <div class="form-group">
                    <label class="col-md-4 control-label">Телефон:</label>
                    <div class="col-lg-8">
                        @Html.TextBoxFor(model => model.PolicyHolderPhoneNumber, new { @class = "form-control input-sm", @id = "PolicyHolderPhone", @readonly = true })

                    </div>
                </div>
                <div class="form-group">
                    <label class="col-md-4 control-label">ЕМБГ:</label>
                    <div class="col-lg-8">
                        @Html.TextBoxFor(model => model.PolicyHolderSsn, new { @class = "form-control input-sm", @id = "PolicyHolderSSN", @readonly = true })
                       
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    
                    <div class="col-lg-8 col-md-8">
                        <label class="control-label">Искористи претходна трансакциска сметка:</label>
                    </div>
                    @Html.CheckBoxFor(model => model.PolicyHolderExistentBankAccount, new { @class = "col-md-1", @id = "ExistentBankAccount", @readonly = true, @style = "margin-top:3%;" })
                   
                </div>
                <div class="form-group">

                    <div class="col-lg-4 col-md-4">
                        <label class="control-label">Странска сметка</label>
                    </div>
                    @Html.CheckBoxFor(model => model.PolicyHolderForeignBankAccount, new { @class = "col-md-1", @id = "ForeignBankAccount", @readonly = true, @style = "margin-top:3%;" })
                    
                </div>
                <div class="form-group" style="padding-left: 34%;">
                   
                    <div class="col-md-12">
                        <select class="form-control" data-val="true" id="DropDownBankAccountPolicyHolder"  name="PolicyHolderForeignBankAccountId">
                            <option value="0">Избери трансакциска сметка</option>
                        </select>
                    </div>
                </div>

                <div class="form-group">
                    
                    <label class="col-md-5 control-label">Трансакциона сметка:</label>
                    <div class="col-lg-6">
                        @Html.EditorFor(model => model.PolicyHolderBankAccountNumber, new { htmlAttributes = new { @class = "form-control input-sm" , @maxLength = "15", @id= "TransactionAccount" } })
                        @Html.ValidationMessageFor(model => model.PolicyHolderBankAccountNumber, "", new { @class = "text-danger input-sm" })
                    </div>
                    <span class="glyphicon glyphicon-star small" aria-hidden="true" style="color:red" id="taccountspan"></span>
                </div>


                <div class="form-group">
                    <label class="col-md-5 control-label">Депонент банка:</label>
                    <div class="col-lg-6">
                       @Html.EditorFor(model => model.PolicyHolderBankName, new { htmlAttributes = new { @class = "form-control input-sm", @id = "deponent" } })
                       @Html.ValidationMessageFor(model => model.PolicyHolderBankName, "", new { @class = "text-danger input-sm" })
   
                    </div>
                    <span class="glyphicon glyphicon-star small" aria-hidden="true" style="color:red" id="deponentspan"></span>
                </div>
            </div>
        </div>


        <div class="row container">
            <header class="well">Корисник на осигурувањето</header>
            <div class="col-md-6">
                <div class="form-group">
                    <span class="col-md-4"></span>
                    <div class="col-md-8">
                        <select class="form-control" data-val="true" id="DropDownInsureds" name="ClaimantId">
                            <option value="0">Избери корисник</option>
                        </select>
                    </div>     
                    </div>
                    <div class="form-group">
                        <span class="glyphicon glyphicon-star small" aria-hidden="true" style="color:red"></span>
                        <label class="col-md-4 control-label">Оштетен:</label>
                        <div class="col-lg-7">
                            @Html.TextBoxFor(model => model.ClaimantName, new { @class = "form-control input-sm", @id = "InsuredName", @readonly = true })
                            @Html.ValidationMessageFor(model => model.ClaimantName, "", new { @class = "text-danger input-sm" })
                        </div>
                    </div>
                <div class="form-group">
                    <span class="glyphicon glyphicon-star small" aria-hidden="true" style="color:red"></span>
                    <label class="col-md-4 control-label">Адреса:</label>
                    <div class="col-lg-7">
                        @Html.TextBoxFor(model => model.ClaimantAdress, new { @class = "form-control input-sm", @id = "InsuredAdress", @readonly = true })
                        @Html.ValidationMessageFor(model => model.ClaimantAdress, "", new { @class = "text-danger input-sm" })                     
                    </div>
                </div>
                <div class="form-group">
                    <span class="glyphicon glyphicon-star small" aria-hidden="true" style="color:red"></span>
                    <label class="col-md-4 control-label">Телефон:</label>
                    <div class="col-lg-7">
                        @Html.TextBoxFor(model => model.ClaimantPhoneNumber, new { @class = "form-control input-sm", @id = "InsuredPhone", @readonly = true })     
                        @Html.ValidationMessageFor(model => model.ClaimantPhoneNumber, "", new { @class = "text-danger input-sm" })                                      
                    </div>
                </div>
                <div class="form-group">
                    <span class="glyphicon glyphicon-star small" aria-hidden="true" style="color:red"></span>
                    <label class="col-md-4 control-label">ЕМБГ:</label>
                    <div class="col-lg-7">
                        
                        @Html.TextBoxFor(model => model.ClaimantSsn, new {@class = "form-control input-sm", @id = "InsuredSSN", @readonly = true})
                        @Html.ValidationMessageFor(model => model.ClaimantSsn, "", new { @class = "text-danger input-sm" })
                    </div>
                </div>

                <div class="form-group" id="HideWhenSameUserAndSelectedInsured">
                    <label class="col-md-4 control-label">Сродство со осигуреникот:</label>
                    <div class="col-lg-7">
                        @Html.EditorFor(model => model.RelationClaimantPolicyHolder, new { htmlAttributes = new { @class = "form-control input-sm", @id="relationship"} })
                        @Html.ValidationMessageFor(model => model.RelationClaimantPolicyHolder, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
            <div class="col-md-6">
           
                <div class="form-group">

                    <div class="col-lg-8 col-md-8">
                        <label class="control-label">Искористи претходна трансакциска сметка:</label>
                    </div>
                    @Html.CheckBoxFor(model => model.ClaimantExistentBankAccount, new { @class = "col-md-1", @id = "ExistentBankAccountInsured", @readonly = true, @style = "margin-top:3%;" })
                   
                </div>
                <div class="form-group">

                    <div class="col-lg-4 col-md-4">
                        <label class="control-label">Странска сметка</label>
                    </div>
                    @Html.CheckBoxFor(model => model.ClaimantForeignBankAccount, new { @class = "col-md-1", @id = "ForeignBankAccountInsured", @readonly = true, @style = "margin-top:3%;" })                   
                </div>
                <div class="form-group" style="padding-left: 34%;">

                    <div class="col-md-12">
                        <select class="form-control" data-val="true" id="DropDownBankAccountInsured" name="ClaimantForeignBankAccountId">
                            <option value="0">Избери трансакциска сметка</option>
                        </select>
                    </div>
                </div>

                <div class="form-group">
                    <span class="glyphicon glyphicon-star small" aria-hidden="true" style="color:red"></span>
                    <label class="col-md-4 control-label">Трансакциона с-ка:</label>
                    <div class="col-lg-7">
                        @Html.EditorFor(model => model.ClaimantBankAccountNumber, new { htmlAttributes = new { @class = "form-control input-sm", @maxLength = "15", @id= "insuredTransactionAccount" } })
                        @Html.ValidationMessageFor(model => model.ClaimantBankAccountNumber, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    <span class="glyphicon glyphicon-star small" aria-hidden="true" style="color:red"></span>
                    <label class="col-md-4 control-label">Депонент банка:</label>
                    <div class="col-lg-7">
                        @Html.EditorFor(model => model.ClaimantBankName, new { htmlAttributes = new { @class = "form-control input-sm", @id= "deponentInsured" } })
                        @Html.ValidationMessageFor(model => model.ClaimantBankName, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

        </div>


        <div class="row container">
            <header class="well">Податоци за патувањето</header>
            <div class="col-md-6">
                <div class="form-group">
                    <span class="glyphicon glyphicon-star small" aria-hidden="true" style="color:red"></span>
                    <label class="col-md-4 control-label">Место на патување:</label>
                    <div class="col-lg-7">
                        @Html.EditorFor(model => model.Destination, new { htmlAttributes = new { @class = "form-control input-sm", @id= "travelDestination" } })
                        @Html.ValidationMessageFor(model => model.Destination, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    <span class="glyphicon glyphicon-star small" aria-hidden="true" style="color:red"></span>
                    <label class="col-md-4 control-label">Датум на заминување:</label>
                    <div class="col-lg-7">
                        
                        @Html.EditorFor(model => model.DepartDateTime, new { htmlAttributes = new { @class = "form-control input-sm placeholder", type = "date", @id= "travelDateFrom" } })
                        @Html.ValidationMessageFor(model => model.DepartDateTime, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    <label class="col-md-4 control-label">Време на заминување:</label>
                    <div class="col-lg-7">
                        @Html.EditorFor(model => model.DepartTime, new { htmlAttributes = new { @class = "form-control input-sm", type = "time", @id= "travelTimeFrom" } })
                        @Html.ValidationMessageFor(model => model.DepartTime, "", new { @class = "text-danger" })
                    </div>
                </div>

            </div>
            <div class="col-md-6">
                <div class="form-group">
                    <span class="glyphicon glyphicon-star small" aria-hidden="true" style="color:red"></span>
                    <label class="col-md-4 control-label">Превозно средство:</label>
                    <div class="col-lg-7">
                        @Html.EditorFor(model => model.TransportMeans, new { htmlAttributes = new { @class = "form-control input-sm", @id= "transportationType" } })
                        @Html.ValidationMessageFor(model => model.TransportMeans, "", new { @class = "text-danger" })
                    </div>
                </div>

                
                <div class="form-group">
                    <span class="glyphicon glyphicon-star small" aria-hidden="true" style="color:red"></span>
                    <label class="col-md-4 control-label">Датум на враќање:</label>
                    <div class="col-lg-7">
                        @Html.EditorFor(model => model.ArrivalDateTime, new { htmlAttributes = new { @class = "form-control input-sm placeholder", type = "date", @id= "travelDateTo" } })
                        @Html.ValidationMessageFor(model => model.ArrivalDateTime, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    <label class="col-md-4 control-label">Време на враќање:</label>
                    <div class="col-lg-7">
                        @Html.EditorFor(model => model.DepartTime, new { htmlAttributes = new { @class = "form-control input-sm", type = "time", @id= "travelTimeTo" } })
                        @Html.ValidationMessageFor(model => model.DepartTime, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

        </div>


        <div class="row container">
            <header class="well">Одберете тип на осигурување: </header>

            <span class="glyphicon glyphicon-star small" aria-hidden="true" style="color:red"></span>
            <div class="col-md-4">
              

                <div class="form-group">
                    @Html.RadioButtonFor(m => m.IsHealthInsurance, "true", new  {@onchange = "InsuranceType('HealthInsurance');", @id ="health", @required = "true", @class= "required" })Здравствено осигурување

                </div>
            </div>
                
            <div class="col-md-4">
                <div class="form-group">
                    @Html.RadioButtonFor(m => m.IsHealthInsurance, "false", new {  @onchange = "InsuranceType('LuggageInsurance');", @id = "luggage", @required ="true", @class = "required" })Осигурување на багаж
                </div>
            </div>
        </div>

        <div class="row container" hidden id="healthInsurance">
            <header class="well">Податоци за штетата - Здравствено осигурување</header>
            <div class="col-md-6">
                <div class="form-group">
                    <span class="glyphicon glyphicon-star small" aria-hidden="true" style="color:red"></span>
                    <label class="col-md-4 control-label">Датум на незгодата:</label>
                    <div class="col-lg-7">
                        @Html.EditorFor(model => model.AccidentDateTimeHealth, new { htmlAttributes = new { @class = "form-control input-sm", type = "date", @id= "lossDate" } })
                        @Html.ValidationMessageFor(model => model.AccidentDateTimeHealth, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    <span class="glyphicon glyphicon-star small" aria-hidden="true" style="color:red"></span>
                    <label class="col-md-4 control-label">Време на незгодата:</label>
                    <div class="col-lg-7">
                        @Html.EditorFor(model => model.AccidentTimeHealth, new { htmlAttributes = new { @class = "form-control input-sm", type = "time", @id="lossTime" } })
                        @Html.ValidationMessageFor(model => model.AccidentTimeHealth, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    <span class="glyphicon glyphicon-star small" aria-hidden="true" style="color:red"></span>
                    <label class="col-md-4 control-label">Место на незгодата:</label>
                    <div class="col-lg-7">
                        @Html.EditorFor(model => model.AccidentPlaceHealth, new { htmlAttributes = new { @class = "form-control input-sm", @id="placeLoss" } })
                        @Html.ValidationMessageFor(model => model.AccidentPlaceHealth, "", new { @class = "text-danger" })
                    </div>
                </div>
                
                <div class="form-group">
                    <span class="glyphicon glyphicon-star small" aria-hidden="true" style="color:red"></span>
                    <label class="col-md-4 control-label">Датум на посета кај доктор:</label>
                    <div class="col-lg-7">
                        @Html.EditorFor(model => model.DoctorVisitDateTime, new { htmlAttributes = new { @class = "form-control input-sm", type = "date" } })
                        @Html.ValidationMessageFor(model => model.DoctorVisitDateTime, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    <label class="col-md-4 control-label">Податоци за докторот:</label>
                    <div class="col-lg-7">
                        @Html.TextAreaFor(model => model.DoctorInfo, new { htmlAttributes = new { @class = "form-control input-sm" } })
                     
                    </div>
                </div>



               

            </div>
            <div class="col-md-6">
                <div class="form-group">
                    <label class="col-md-4 control-label">Опис на болеста:</label>
                    <div class="col-lg-7">
                        @Html.TextAreaFor(model => model.MedicalCaseDescription, new { htmlAttributes = new { @class = "form-control input-sm", @id= "illnessInfo" } })
                     
                    </div>
                </div>
                
                <div class="form-group">
                    
                    <label class="col-md-4 control-label">Дали претходно сте биле лекувани од истата:</label>
                    <div class="col-lg-7">
                        @Html.CheckBoxFor(model => model.PreviousMedicalHistory, new { @class = "col-md-1", @style = "margin-top:3%;" })
              
              
                    </div>
                </div>

                <div class="form-group">
                    <label class="col-md-4 control-label">Документи приложени како доказ:</label>
                    <div class="col-lg-7">
                      
                    </div>
                </div>
                <div class="form-group">
                    <label class="col-md-4 control-label">Во случај на тешка повреда или смрт, кој орган составил записник и детален опис на настанот :</label>
                    <div class="col-lg-7">
                        @Html.EditorFor(model => model.ResponsibleInstitution, new { htmlAttributes = new { @class = "form-control input-sm" } })
                        
                    </div>
                </div>
            </div>

        </div>

        <div class="row container" hidden id="luggageInsurance">
            <header class="well">Податоци за штетата - Осигурување на багаж</header>
            <div class="col-md-6">
                <div class="form-group">
                    <span class="glyphicon glyphicon-star small" aria-hidden="true" style="color:red"></span>
                    <label class="col-md-4 control-label">Датум на настанот:</label>
                    <div class="col-lg-7">
                        @Html.EditorFor(model => model.AccidentDateTimeLuggage, new { htmlAttributes = new { @class = "form-control input-sm", type = "date", @id= "baggageLossDate" } })
                        @Html.ValidationMessageFor(model => model.AccidentDateTimeLuggage, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    <span class="glyphicon glyphicon-star small" aria-hidden="true" style="color:red"></span>
                    <label class="col-md-4 control-label">Место на незгодата:</label>
                    <div class="col-lg-7">
                        @Html.EditorFor(model => model.AccidentPlaceLuggage, new { htmlAttributes = new { @class = "form-control input-sm"} })
                        @Html.ValidationMessageFor(model => model.AccidentPlaceLuggage, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    <span class="glyphicon glyphicon-star small" aria-hidden="true" style="color:red"></span>
                    <label class="col-md-4 control-label">Опис на настанот:</label>
                    <div class="col-lg-7">
                        @Html.TextAreaFor(model => model.PlaceDescription, new { htmlAttributes = new { @class = "form-control input-sm"} })
                        @Html.ValidationMessageFor(model => model.PlaceDescription, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    <span class="glyphicon glyphicon-star small" aria-hidden="true" style="color:red"></span>
                    <label class="col-md-4 control-label">Детален опис на настанот:</label>
                    <div class="col-lg-7">
                        @Html.TextAreaFor(model => model.DetailDescription, new { htmlAttributes = new { @class = "form-control input-sm" } })
                        @Html.ValidationMessageFor(model => model.DetailDescription, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    <span class="glyphicon glyphicon-star small" aria-hidden="true" style="color:red"></span>
                    <label class="col-md-4 control-label">Место на пријавување:</label>
                    <div class="col-lg-7">
                        @Html.EditorFor(model => model.ReportPlace, new { htmlAttributes = new { @class = "form-control input-sm" } })
                        @Html.ValidationMessageFor(model => model.ReportPlace, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    <label class="col-md-4 control-label">Опис на украдените/оштетени предмети:</label>
                    <div class="col-lg-7">
                        @Html.TextAreaFor(model => model.Floaters, new { htmlAttributes = new { @class = "form-control input-sm" } })                     
                    </div>
                </div>
                
                <div class="form-group">
                    <label class="col-md-4 control-label">Вредност:</label>
                    <div class="col-lg-7">
                        @Html.TextAreaFor(model => model.FloatersValue, new { htmlAttributes = new { @class = "form-control input-sm" } })
                    </div>
                </div>

                <div class="form-group">
                    <label class="col-md-4 control-label">Документи приложени како доказ :</label>
                    <div class="col-lg-7">
                      
                    </div>
                </div>
                <div class="form-group">
                    <span class="glyphicon glyphicon-star small" aria-hidden="true" style="color:red"></span>
                    <label class="col-md-4 control-label">Време на пристигнување на аеродром :</label>
                    <div class="col-lg-7">
                        @Html.EditorFor(model => model.AccidentTimeLuggage, new { htmlAttributes = new { @class = "form-control input-sm", type = "time" } })
                        @Html.ValidationMessageFor(model => model.AccidentTimeLuggage, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    <span class="glyphicon glyphicon-star small" aria-hidden="true" style="color:red"></span>
                    <label class="col-md-4 control-label">Време на предавање на багаж :</label>
                    <div class="col-lg-7">
                        @Html.EditorFor(model => model.LugaggeCheckingTime, new { htmlAttributes = new { @class = "form-control input-sm", type = "time" } })
                        @Html.ValidationMessageFor(model => model.LugaggeCheckingTime, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

        </div>

        <div class="row container">
            <header class="well">Податоци за трошоци</header>
            <div class="col-md-6">
                <div class="form-group">
                    <label class="col-md-4 control-label">Фактури како доказ:</label>
                    <div class="col-lg-7">
                       
                    </div>
                </div>
                <div class="form-group">
                    <span class="glyphicon glyphicon-star small" aria-hidden="true" style="color:red"></span>
                    <label class="col-md-4 control-label">Вкупна вредност на сите трошоци:</label>
                    <div class="col-lg-7">
                        <div class="input-group">
                            @Html.EditorFor(model => model.TotalCost, new { htmlAttributes = new { @class = "form-control input-sm" } })
                            <span class="input-group-addon">.00 денари</span>
                        </div>
                        @Html.ValidationMessageFor(model => model.TotalCost, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Пријави" class="btn btn-default" />
            </div>
        </div>
    </div>

</form>

@if (ViewBag.insurance == "Health Insurance")
{
    <script type="text/javascript">
        $(document).ready(function () {
            $("#health").attr("checked", "true");
            $("#hiddenIsHealthInsurance").prop("checked", true);
            $("#healthInsurance").toggle();
        });
    </script>
}
else if (ViewBag.insurance == "Luggage Insurance")
{
    <script type="text/javascript">
        $(document).ready(function () {
            $("#luggage").attr("checked", "true");
            $("#hiddenIsHealthInsurance").prop("checked", false);
            $("#luggageInsurance").toggle();
        });
    </script>
}


<script type="text/javascript">
    var Banks;
    $(document).ready(function () {

        $('#deponent').prop('readonly', true);  
        $('#deponentInsured').prop('readonly', true);

        $('#DropDownBankAccountPolicyHolder').hide();
        $('#DropDownBankAccountInsured').hide();

        $("#TransactionAccount").keydown(function (e) {
          
            if ($.inArray(e.keyCode, [46, 8, 9, 27, 13, 110, 190]) !== -1 ||             
                (e.keyCode === 65 && (e.ctrlKey === true || e.metaKey === true)) ||
                (e.keyCode >= 35 && e.keyCode <= 40)) {
                return;
            }
            if ((e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) && (e.keyCode < 96 || e.keyCode > 105)) {
                e.preventDefault();
            }
        });
        $("#insuredTransactionAccount").keydown(function (e) {

            if ($.inArray(e.keyCode, [46, 8, 9, 27, 13, 110, 190]) !== -1 ||
                (e.keyCode === 65 && (e.ctrlKey === true || e.metaKey === true)) ||
                (e.keyCode >= 35 && e.keyCode <= 40)) {
                return;
            }
            if ((e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) && (e.keyCode < 96 || e.keyCode > 105)) {
                e.preventDefault();
            }
        });


    });

    $("#ExistentBankAccount").change(function () {
        if (this.checked) {
            $('#DropDownBankAccountPolicyHolder').show();
            $('#TransactionAccount').prop('readonly', true);
            $('#deponent').prop('readonly', true);
            $("#TransactionAccount").attr("value", "");
            $("#deponent").attr("value", "");
            $("#DropDownBankAccountPolicyHolder option:selected").prop("selected", false)
           
            
        }
        else {
            $('#DropDownBankAccountPolicyHolder').hide();
            
            $('#TransactionAccount').prop('readonly', false);
            $("#TransactionAccount").attr("value", "");
            $("#deponent").attr("value", "");
            $("#DropDownBankAccountPolicyHolder option:selected").prop("selected", false);

            if ($('#ForeignBankAccount').is(':checked')) {
                $('#deponent').prop('readonly', false);
            }

        }
    });

    $("#ExistentBankAccountInsured").change(function () {
        if (this.checked) {
            $('#DropDownBankAccountInsured').show();
            $('#insuredTransactionAccount').prop('readonly', true);
            
            $('#DropDownBankAccountInsured').show();
            $('#insuredTransactionAccount').prop('readonly', true);
            $('#deponentInsured').prop('readonly', true);
            $("#insuredTransactionAccount").attr("value", "");
            $("#deponentInsured").attr("value", "");
            $("#DropDownBankAccountInsured option:selected").prop("selected", false)


        }
        else {
            
            $('#DropDownBankAccountInsured').hide();
            $('#insuredTransactionAccount').prop('readonly', false);         
            $("#insuredTransactionAccount").attr("value", "");
            $("#deponentInsured").attr("value", "");
            $("#DropDownBankAccountInsured option:selected").prop("selected", false);
            if ($('#ForeignBankAccountInsured').is(':checked')) {
                $('#deponentInsured').prop('readonly', false);
            }

        }
    });

    $('#travelDateFrom').change(function (event) {
        var inputMinDate = $("#lossDate").attr("min");    
        var inputMinDate = $("#baggageLossDate").attr("min");
        var inputMinDateArray = inputMinDate.split('-');
        var inputStartTrip = $('#travelDateFrom').val();
        var inputStartTripArray = inputStartTrip.split('-');
        if (parseInt(inputStartTripArray[0]) > parseInt(inputMinDateArray[0]))
        {
            $("#lossDate").attr("min", inputStartTrip);
            $("#baggageLossDate").attr("min", inputStartTrip);
        }
        else if (parseInt(inputStartTripArray[0]) == parseInt(inputMinDateArray[0]))
        {
            if(parseInt(inputStartTripArray[1]) > parseInt(inputMinDateArray[1]))
            {
                $("#lossDate").attr("min", inputStartTrip);
                $("#baggageLossDate").attr("min", inputStartTrip);
            }
            else if (parseInt(inputStartTripArray[1]) == parseInt(inputMinDateArray[1]))
            {
                if(parseInt(inputStartTripArray[2]) > parseInt(inputMinDateArray[2]))
                {
                    $("#lossDate").attr("min", inputStartTrip);
                    $("#baggageLossDate").attr("min", inputStartTrip);
                }
            }
        }

        console.log("value changed");
    });


    $('#travelDateTo').change(function (event) {
        var inputMinDate = $("#lossDate").attr("max");
        var inputMinDate = $("#baggageLossDate").attr("max");
        var inputMinDateArray = inputMinDate.split('-');
        var inputStartTrip = $('#travelDateTo').val();
        var inputStartTripArray = inputStartTrip.split('-');
        if (parseInt(inputStartTripArray[0]) < parseInt(inputMinDateArray[0])) {
            $("#lossDate").attr("min", inputStartTrip);
            $("#baggageLossDate").attr("min", inputStartTrip);
        }
        else if (parseInt(inputStartTripArray[0]) == parseInt(inputMinDateArray[0])) {
            if (parseInt(inputStartTripArray[1]) < parseInt(inputMinDateArray[1])) {
                $("#lossDate").attr("min", inputStartTrip);
                $("#baggageLossDate").attr("min", inputStartTrip);
            }
            else if (parseInt(inputStartTripArray[1]) == parseInt(inputMinDateArray[1])) {
                if (parseInt(inputStartTripArray[2]) < parseInt(inputMinDateArray[2])) {
                    $("#lossDate").attr("min", inputStartTrip);
                    $("#baggageLossDate").attr("min", inputStartTrip);
                }
            }
        }

        console.log("value changed");
    });
    



    $("#ForeignBankAccount").change(function () {
        if (this.checked) {
            $("#DropDownBankAccountPolicyHolder option:selected").prop("selected", false);
            $("#TransactionAccount").attr("value", "");
            $("#deponent").attr("value", "");
            $('#TransactionAccount').attr('maxLength', 30);
           
            if ($('#ExistentBankAccount').is(':checked'))
            {
                $('#TransactionAccount').prop('readonly', true);

            }
            else
            {
                $('#deponent').prop('readonly', false);

            }
        }
        else {
            $("#DropDownBankAccountPolicyHolder option:selected").prop("selected", false);
            $("#TransactionAccount").attr("value", "");
            $("#deponent").attr("value", "");
            $('#TransactionAccount').attr('maxLength', 15);
            $('#deponent').prop('readonly', true);
        }
    });

    $("#ForeignBankAccountInsured").change(function () {
        if (this.checked) {
            $("#DropDownBankAccountInsured option:selected").prop("selected", false);
            $("#insuredTransactionAccount").attr("value", "");
            $("#deponentInsured").attr("value", "");
            $('#insuredTransactionAccount').attr('maxLength', 30);

            if ($('#ExistentBankAccountInsured').is(':checked')) {
                $('#insuredTransactionAccount').prop('readonly', true);

            }
            else {
                $('#deponentInsured').prop('readonly', false);

            }
        }
        else {
            $("#DropDownBankAccountInsured option:selected").prop("selected", false);
            $("#insuredTransactionAccount").attr("value", "");
            $("#deponentInsured").attr("value", "");
            $('#insuredTransactionAccount').attr('maxLength', 15);
            $('#deponentInsured').prop('readonly', true);
        }
    });

    
    $('#TransactionAccount').focusout(function () {

        if ($("#ForeignBankAccount").checked &&  $("#ExistentBankAccount").checked)
        {
            $('#deponent').prop('readonly', true);
        }
        else {
            var bankAccount = $('#TransactionAccount').val();
            var prefixTillNow = bankAccount.substring(0, 3);
        $.each(Banks, function (key, value) {
            if(value.Prefix == prefixTillNow){
                $('#deponent').attr('value',value.BankName);
            }
        });
        }

        
    });

    $('#insuredTransactionAccount').focusout(function () {

        if ($("#ForeignBankAccountInsured").checked && $("#ExistentBankAccountInsured").checked) {
            $('#deponentInsured').prop('readonly', true);
        }
        else {
            var bankAccount = $('#insuredTransactionAccount').val();
            var prefixTillNow = bankAccount.substring(0, 3);
            $.each(Banks, function (key, value) {
                if (value.Prefix == prefixTillNow) {
                    $('#deponentInsured').attr('value', value.BankName);
                }
            });
        }
    });
  


    $('#DropDownBankAccountPolicyHolder').on('change', function ()
    {
        if ($('#DropDownBankAccountPolicyHolder option:selected').val() == 0)
        {
            $('#deponent').attr('value',"");
            $('#TransactionAccount').attr('value', "");
        }
        else {
        $('#deponent').attr('value', $('#DropDownBankAccountPolicyHolder option:selected').attr("bank"));
        $('#TransactionAccount').attr('value', $('#DropDownBankAccountPolicyHolder option:selected').text());
         }
    });



    $('#DropDownBankAccountInsured').on('change', function () {
        if ($('#DropDownBankAccountInsured option:selected').val() == 0) {
            $('#deponentInsured').attr('value', "");
            $('#insuredTransactionAccount').attr('value', "");
        }
        else {
            $('#deponentInsured').attr('value', $('#DropDownBankAccountInsured option:selected').attr("bank"));
            $('#insuredTransactionAccount').attr('value', $('#DropDownBankAccountInsured option:selected').text());
        }
    });


    $('#DropDownPolicyNumber').on('change', function () {
        ClearDropDownData();
        var PolicyId = $('#DropDownPolicyNumber').val();
        $('#PolicyId').val(PolicyId);
        $.ajax({
            type: "GET",
            url: "/FirstNoticeOfLoss/GetInsureds?policyID=" + PolicyId,
            success: function (result) {

                var rez = JSON.parse(result);
                console.log(rez);
                Banks = rez.banks;
                debugger;
                $("#PolicyHolderId").attr("value", rez.policyholder.Id);
                $("#PolicyHolderName").attr("value", rez.policyholder.FirstName + " " + rez.policyholder.LastName);
                $("#PolicyHolderName").attr("IdPolicyHolder", rez.policyholder.Id);
                $("#PolicyHolderPhone").attr("value", rez.policyholder.PhoneNumber);
                $("#PolicyHolderSSN").attr("value", rez.policyholder.SSN);
                $("#PolicyHolderAddress").attr("value", rez.policyholder.Adress + " " + rez.policyholder.City);

                $.each(rez.policyholder.BankAccounts, function (key, value)
                {
                    $('#DropDownBankAccountPolicyHolder').append($("<option></option>").attr({ value: value.Id, bank: value.BankName }).text(value.AccountNumber));
                });


                $.each(rez.data, function (i, val) {
                    $('#DropDownInsureds').append(
                    $("<option></option>")
                      .attr("value", val.Id)
                      .text(val.FirstName + " " + val.LastName));
                });
                FillInsuredData();

                $('#lossDate').attr("min", rez.StartDate);
                $('#lossDate').attr("max", rez.EndDate);            
                $('#baggageLossDate').attr("min", rez.StartDate);
                $('#baggageLossDate').attr("max", rez.EndDate);
            }
        });



    });

    function InsuranceType(type) {
        if (type == "LuggageInsurance") {
            $("#luggageInsurance").toggle();
            $("#hiddenIsHealthInsurance").prop("checked", false);
            $("#healthInsurance").hide();
        } else if (type == "HealthInsurance") {
            $("#healthInsurance").toggle();
            $("#hiddenIsHealthInsurance").prop("checked", true);
            $("#luggageInsurance").hide();
        }
    }

    function ClearDropDownData() {

        $("#PolicyHolderName").attr("value", "");
        $("#PolicyHolderPhone").attr("value", "");
        $("#PolicyHolderSSN").attr("value", "");
        $("#PolicyHolderAddress").attr("value", "");
        $("#TransactionAccount").attr("value", "");
        $("#deponent").attr("value", "");
        


        $.each($('#DropDownBankAccountPolicyHolder option'), function (i, val) {
            if (val.value == 0) {
            }
            else {
                $(val).remove();
            }
        });
    }

    function ClearDropDownDataInsured() {

        $("#InsuredName").attr("value", "");
        $("#InsuredAdress").attr("value", "");
        $("#InsuredPhone").attr("value", "");
        $("#InsuredSSN").attr("value", "");
        $("#relationship").attr("value", "");

        $.each($('#DropDownBankAccountInsured option'), function (i, val) {
            if (val.value == 0) {
            }
            else {
                $(val).remove();
            }
        });
    }




    function FillInsuredData() {


        $('#DropDownInsureds').on('change', function () {
            ClearDropDownDataInsured();
            var InsuredId = $('#DropDownInsureds option:selected').val()

            $.ajax({
                type: "GET",
                url: "/FirstNoticeOfLoss/GetInsuredData?SelectedInsuredId=" + InsuredId,
                dataType: "json",
                success: function (result) {
                    console.log(result);
                    $("#InsuredName").attr("value", result.FirstName + " " + result.LastName);
                    $("#InsuredAdress").attr("value", result.Adress);
                    $("#InsuredPhone").attr("value", result.PhoneNumber);
                    $("#InsuredSSN").attr("value", result.SSN);
                    $("#relationship").attr("isSameUserWithSelectedInsured", result.IsSameUserAndSelectedInsured);

                    $.each(result.BankAccounts, function (key, value) {
                        $('#DropDownBankAccountInsured').append($("<option></option>").attr({ value: value.Id, bank: value.BankName }).text(value.AccountNumber));
                    });

                  
                    if ($("#PolicyHolderName").attr("idpolicyholder") == $('#DropDownInsureds option:selected').val())
                    {
                        console.log("isti se");
                        $("#HideWhenSameUserAndSelectedInsured").hide();
                    }
                    else {
                        $("#HideWhenSameUserAndSelectedInsured").show();
                    }
                }
            });

           
           


        });
    }


</script>

