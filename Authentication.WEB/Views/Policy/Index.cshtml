@model InsuredTraveling.Models.Policy
@using InsuredTraveling.Filters;
@using System.Web.Optimization;
@using System.Configuration;
@{
    ViewBag.Title = InsuredTraveling.Resource.NewPolicy_Title;
    Layout = "~/Views/Shared/_LayoutLimitless.cshtml";
}
<link href="~/Content/savaCss/freelancer.min.css" rel="stylesheet" />
<link href="~/Content/savaCss/style.css" rel="stylesheet" />

<div class="col-md-12">
    <div class="form-group text-left">
        <h1>ПАТНИЧКО ОСИГУРУВАЊЕ <span id="mainTitlePackage">GOLD</span></h1>
    </div>
</div>

<div class="loader" style="display:none"></div>

<form id="policy_form" metod="post">
    <div class="col-md-4">
        @Html.Partial("_PolicyBasicInfo", Model)
    </div>

    <div class="col-md-8">
        @Html.Partial("_PolicyDetails", Model)
    </div>

    <div class="row">
        <div class="col-md-4 col-md-offset-4">
            <div class="form-group totalPremium" style="padding-top: 15px;">
                @Html.LabelFor(model => model.Total_Premium, htmlAttributes: new { @class = "control-label", @id = "totalPremiumLabel" })
                <div>
                    <div class="input-group">
                        @Html.EditorFor(model => model.Total_Premium, new { htmlAttributes = new { @class = "", style = "width: 100px; border:none; font-size:24px; color:red; font-weight:bold;", id = "totalPremium", @readonly = "true" } })
                    </div>
                </div>
            </div>
            <div>
                <label id="errorMessage" style="color:red"></label>
            </div>
        </div>
    </div>
    
    <div class="row">
        <div class="col-md-4 col-md-offset-4">
            <p id="locationError"></p>
        </div>
    </div>

    <div class="row">
        <div class="col-md-4 col-md-offset-4">
            <!-- So JS se dodavaat formaction="/Payment/Index"
            formmethod="post" -->
            <input type="submit" value="@InsuredTraveling.Resource.Policy_BuyPolicy" class="btn btn-success hideMe btn-padding btn-block customButton" id="buyPolicyBtn" formmethod="post" formaction="/Payment/Index" />
        </div>
    </div>

    <br />

    <div class="row">
        <div class="col-md-4 col-md-offset-4">
            <div class="form-group col-md-6 btns-position">
                <input type="button" id="AddOffer" value="@InsuredTraveling.Resource.Policy_AddOffer" class="btn btn-default btn-block hideMe" />
            </div>
            <div class="form-group col-md-6 btns-position">
                <input type="submit" id="printOffers" formmethod="post" formaction="/Policy/RedirectPrintOfferSava" class="btn btn-default btn-block hideMe" value="@InsuredTraveling.Resource.Policy_PrintOffer" />
            </div>
            <div id="successMsg" class="col-md-6" style="display:none;">
                <div class="alert alert-dismissible alert-success">
                    <button type="button" class="close" data-dismiss="alert">&times;</button>
                    <span>@Resource.Policy_AddOfferMsg <span style="font-weight:bold;" id="ReturnedQuoteNumber"></span> </span>
                </div>
            </div>
            <div id="failMsg" class="col-md-6" style="display:none;">
                <div class="alert alert-dismissible alert-danger">
                    <button type="button" class="close" data-dismiss="alert">&times;</button>
                    <span>@Resource.Policy_AddOfferMsgFail!</span>
                </div>
            </div>
        </div>
    </div>

    @*<div class="modal fade" id="modal" role="dialog">
        <div class="modal-dialog" style="margin-top:13%;">
             Modal content
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">The user with that SSN already exists</h4>
                </div>
                <div class="modal-body">
                    <p>Do you want to use the existing data? Or enter new data?</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-success" data-dismiss="modal" id="UseExistingDataForUser">Yes</button><button type="button" class="btn btn-danger" data-dismiss="modal">No</button>  <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>*@

</form>

@*<div class="modal fade" id="modalHolder" role="dialog">
    <div class="modal-dialog" style="margin-top:13%;">
         Modal content
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">@InsuredTraveling.Resource.Policy_Modal_Date_Header </h4>
            </div>
            <div class="modal-body">
                <p>@InsuredTraveling.Resource.Policy_Modal_Date_Text</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-success" data-dismiss="modal" id="ChangeDate">@InsuredTraveling.Resource.Policy_Modal_Date_ChangeDate</button><button type="button" class="btn btn-danger" data-dismiss="modal" id="DontChangeDate">@InsuredTraveling.Resource.Policy_Modal_Date_CancelDate</button>
            </div>
        </div>
    </div>
</div>*@


<script src="~/Scripts/jquery.validate.js"></script>
<script src="~/Scripts/additional-methods.js"></script>
<!-- macedonian language-->
<script src="~/Scripts/messages_is.js"></script>
@Scripts.Render("~/bundles/jqueryui")
@Styles.Render("~/Content/jqueryuicss")
@Styles.Render("~/Content/loader")
<script type="text/javascript">
    $(document).ready(function () {
        $("#successMsg").hide();
        $("#failMsg").hide();
        $("#Valid_Days").val(10);

        $("#totalPremiumLabel").hide();
        $("#totalPremium").hide();
        $("#buyPolicyBtn").hide();
        $("#AddOffer").hide();

        var dateFormatString = "@System.Configuration.ConfigurationManager.AppSettings["DateFormat"].ToString().ToLower()";
        var future = new Date();
        //$("#Start_Date").val($.datepicker.formatDate(dateFormatString, new Date(future.setDate(future.getDate() + 1))));
        //$("#End_Date").val($.datepicker.formatDate(dateFormatString, new Date(future.setDate(future.getDate() + 9))));
        var DateToday = new Date();

        //$("#Start_Date").datepicker({
        //    dateFormat: dateFormatString,
        //    "minDate": DateToday,
        //    onSelect: function (selected) {
        //        $("#End_Date").datepicker("option", "minDate", selected);
        //        var startDateParts = $("#Start_Date").val().split("/");
        //        var endDateParts = $("#End_Date").val().split("/");
        //        var startDate = new Date(startDateParts[2], startDateParts[1] - 1, startDateParts[0]);
        //        var endDate = new Date(endDateParts[2], endDateParts[1] - 1, endDateParts[0]);
        //        if (startDate != null && endDate != null) {
        //            c = 24 * 60 * 60 * 1000;
        //            var validDays = Math.round(((endDate - startDate) / c) + 1);
        //            $("#Valid_Days").attr({
        //                "max": validDays
        //            });
        //            $("#Valid_Days").val(validDays);
        //        }
        //    }
        //});

        //$("#End_Date").datepicker({
        //    dateFormat: dateFormatString,
        //    "minDate": DateToday,
        //    onSelect: function (selected) {
        //        $("#Start_Date").datepicker("option", "maxDate", selected);
        //        var startDateParts = $("#Start_Date").val().split("/");
        //        var endDateParts = $("#End_Date").val().split("/");
        //        var startDate = new Date(startDateParts[2], startDateParts[1] - 1, startDateParts[0]);
        //        var endDate = new Date(endDateParts[2], endDateParts[1] - 1, endDateParts[0]);
        //        if (startDate != null && endDate != null) {
        //            c = 24 * 60 * 60 * 1000;
        //            var validDays = Math.round(((endDate - startDate) / c) + 1);
        //            $("#Valid_Days").attr({
        //                "max": validDays
        //            });
        //            $("#Valid_Days").val(validDays);
        //        }
        //    }
        //});

        $("#BirthDate").datepicker({
            dateFormat: dateFormatString,
            changeMonth: true,
            changeYear: true,
            yearRange: '-100y:c+nn',
            maxDate: 'd'
        });

        $("#PolicyHolderBirthDate").datepicker({
            dateFormat: dateFormatString,
            changeMonth: true,
            changeYear: true,
            yearRange: '-100y:c+nn',
            maxDate: 'd'
        });

        $("input:checkbox[id='IsExistentPolicyHolder']").attr('checked', true);
        $(".hideWhenSelect").hide();
        $("#PolicyHolderSSN").removeClass("mandatoryField");
        $("#PolicyHolderName").removeClass("mandatoryField");
        $("#PolicyHolderLastName").removeClass("mandatoryField");
        $("#PolicyHolderAddress").removeClass("mandatoryField");
        $("#PolicyHolderSSN").removeClass("mandatoryField");
        $("#PolicyHolderPostalCode").removeClass("mandatoryField");
        $("#PolicyHolderBirthDate").removeClass("mandatoryField");
        $("#PolicyHolderPassportNumber_ID").removeClass("mandatoryField");
        $("#PolicyHolderEmail").removeClass("mandatoryField");
        $("#PolicyHolderPhoneNumber").removeClass("mandatoryField");
        $("#PolicyHolderCity").removeClass("mandatoryField");

        $("#policy_type option[value='5']").hide();
        $("#policy_type option[value='1']").show();
        $("#policy_type option[value='2']").show();
        $("#policy_type option[value='3']").show();
        $("#policy_type option[value='4']").hide();
        $("#Discount_div").hide();

        //Setting the class active-tab, so the user will know which tab is clicked

        $("#addNewPolicy").addClass("active-tab");
        $("#newsTab").removeClass("active-tab");
        $("#searchTab").removeClass("active-tab");
        $("#fnolTab").removeClass("active-tab");
        $("#adminTab").removeClass("active-tab");
        $("#createTab").removeClass("active-tab");
        $("#signupTab").removeClass("active-tab");
        $('#AddOffer').on('click', function () {
            $.ajax({
                type: 'POST',
                url: '@System.Configuration.ConfigurationManager.AppSettings["webpage_url"]/Policy/CreateQuote',
                data: $('#policy_form').serialize(),
                success: function (result) {
                    console.log(result.numberQuote);
                    $("#ReturnedQuoteNumber").text(result.numberQuote);
                    $("#successMsg").show();
                },
                error: function () {
                    $("#failMsg").show();
                }
            });
        });

        $("#policy_type option[value='2']").attr("selected", "selected");

        $(".hideMe").hide();
        $("#totalPremium").hide();
        $("#totalPremiumLabel").hide();
        $("#family").hide();
        $("#group").hide();

        $("#single_type").click(function () {
            $("#family").hide();
            $("#group").hide();
        });
        $("#family_type").click(function () {
            $("#family").show()
            $("#group").hide();
        });
        $("#group_type").click(function () {
            $("#family").hide();
            $("#group").show();
        });

        $("#CountryID").val(1);
        $("#Policy_TypeID").val(1);
        $("#Retaining_RiskID").val(2);

        getLocation();

    });

    $(".mandatoryField, #Policy_TypeID, #Retaining_RiskID, #CountryID, .numberTrips, #additional_charges_1__ID, #additional_charges_0__ID, #single_type, #family_type, #group_type").on('change', function () {
        $(".hideMe").hide();
    })

    $(".input-sm, .text-box").keypress(function (event) {
        var ew = event.which;
        console.log(ew);
        if (ew == 32)
            return true;
        if (46 <= ew && ew <= 57)
            return true;
        if (64 <= ew && ew <= 90)
            return true;
        if (97 <= ew && ew <= 122)
            return true;
        return false;
    });

    function ValidateFields() {
        var flag = true;

        $.each($('.mandatoryField'), function () {
            if ($(this).val().length == "") {
                flag = false;
            }
        });
        if ($("#Valid_Days").val() == 0)
            flag = false;
        return flag;
    }

    var objects = document.getElementsByClassName("mandatoryField");
    var i = 0;
    var errorWell = 0; // error in the well



    function CalculateTotalPremium() {
        var flag = ValidateFields();
        console.log(flag);

        // Front end validation
        errorWell = 0;
        for (i = 0; i < objects.length; i++) {
            if (objects[i].value.length == 0) {
                if ($(objects[i]).hasClass("policyInfo")) {
                    document.getElementById("PolicyPolicyInformationContent").removeAttribute("style");
                    document.getElementById("PolicyPolicyInformationContent").setAttribute("style", "display: block");
                    errorWell = 1;
                }
                if ($(objects[i]).hasClass("holderInfo")) {
                    document.getElementById("HolderInformationContent").removeAttribute("style");
                    document.getElementById("HolderInformationContent").setAttribute("style", "display: block");
                    if (errorWell == 0)
                        errorWell = 2;
                }
                if ($(objects[i]).hasClass("insuredInfo")) {
                    document.getElementById("InsuredInformationContent").removeAttribute("style");
                    document.getElementById("InsuredInformationContent").setAttribute("style", "display: block");
                    if (errorWell == 0)
                        errorWell = 3;
                }
                objects[i].setAttribute("style", "border: 1px solid red;");

            }
            else {
                objects[i].setAttribute("style", "border: 1px solid #3ca082;");
            }
        }

        if (errorWell == 1) {
            $('html,body').animate({
                scrollTop: $("#PolicyPolicyInformationContent").offset().top
            }, 800);
        }
        else if (errorWell == 2) {
            $('html,body').animate({
                scrollTop: $("#HolderInformationContent").offset().top
            }, 800);
        }
        else if (errorWell == 3) {
            $('html,body').animate({
                scrollTop: $("#InsuredInformationContent").offset().top
            }, 800);
        }

        if (flag) {
            $("#errorMessage").text("");
            $(".loader").css("display", "inline");
            $.ajax({
                type: "POST",
                url: "@System.Configuration.ConfigurationManager.AppSettings["webpage_url"]/Policy/Index",
                data: $("#policy_form").serialize(),
                success: function (result) {

                    console.log(result.status);

                    //This code is for AdvancedSSN validation in premium controler & if Premium Amount exceeded
                    if (result.status != null && result.isValid == false) {
                        if (result.message == "ThePremiumIsExceeded") {
                            $("#totalPremium").val(result.PremiumAmount);
                            $("#totalPremium").show();
                            $("#errorMessage").text("@Resource.PolicyThePremiumIsExceededMsg");
                            $(".loader").css("display", "none");
                        } else {
                            $("#errorMessage").text("@Resource.Error_EMBG_Val_Advanced");
                            $(".loader").css("display", "none");
                            $("#SSN").attr("style", "border: 1px solid red;");
                            $("#totalPremiumLabel").hide();
                            $("#totalPremium").val("");
                        }

                    }
                    else {
                        $("#SSN").attr("style", "border: 1px solid #2c3e50;");

                        $(".loader").css("display", "none");
                        console.log(result.PremiumAmount);

                        $(".loader").css("display", "none");

                        $("#totalPremium").val(result.PremiumAmount);
                        $("#totalPremium").show();
                        $("#totalPremiumLabel").show();
                        $(".hideMe").show();
                        $("#errorMessage").text(" ");

                        if (errorWell == 0) {
                            $('html,body').animate({
                                scrollTop: $("#printOffers").offset().top
                            }, 800);
                        }

                    }


                },
                error: function (result) {
                    $(".loader").css("display", "none");
                    $(".hideMe").hide();
                    $("#totalPremiumLabel").hide();
                    $("#totalPremium").val("");
                    $("#errorMessage").text((JSON.parse(result.responseText)).Message);


                }

            });
        }
        else {
            $(".hideMe").hide();
            $("#totalPremiumLabel").hide();
            $("#totalPremium").val("");
            if ($("#Valid_Days").val() == 0) {
                $("#errorMessage").text("@InsuredTraveling.Resource.Policy_ValidDate");
            }
            else {
                $("#errorMessage").text("@InsuredTraveling.Resource.Policy_FillData");
            }
        }
    }


    function DiscountChange() {
        if ($("#DiscountCheck").is(":checked")) {
            $("#Discount_div").show();

            $("#DiscountCode").addClass("mandatoryField");

        }
        else {
            $("#DiscountCode").val('');
            $("#Discount_div").hide();
            $("#DiscountCode").removeClass("mandatoryField");

        }
    };
    function DiscountCodeVal() {
        $.ajax({
            type: "POST",
            url: "@System.Configuration.ConfigurationManager.AppSettings["webpage_apiurl"]/api/Premium/DiscountCode",
            data: jQuery.param({ Discount_Name: $("#DiscountCode").val() })
        })

    .done(function (result) {

        $("#DiscountCode").removeClass("mandatoryField");
        $("#discErrorMessage").text("@InsuredTraveling.Resource.Policy_DiscoundCodeValid ");
    })
    .fail(function () {
        $("#discErrorMessage").text("@InsuredTraveling.Resource.Policy_DiscoundCodeError ");
        $("#DiscountCode").addClass("mandatoryField");

    });
    }



    $("#policyForm").validate({
        rules: {
            EMBG: {
                required: true,
                number: true,
                minlength: 13,
                maxlength: 13
            },
            osigurenik1MaticenBroj: {
                required: true,
                number: true,
                minlength: 13,
                maxlength: 13
            }
        }
    });
    jQuery.validator.setDefaults({
        debug: true,
        success: "valid",

    });
    var form = $("#policyForm");
    form.validate({

        lang: 'is'

    });

    $("#SSN").keydown(function (e) {
        if ($.inArray(e.keyCode, [46, 8, 9, 27, 13, 110, 190]) !== -1 ||
            (e.keyCode === 65 && (e.ctrlKey === true || e.metaKey === true)) ||
            (e.keyCode >= 35 && e.keyCode <= 40)) {
            return;
        }
        if ((e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) && (e.keyCode < 96 || e.keyCode > 105)) {
            e.preventDefault();
        }
    });

    $("#IsExistentPolicyHolder").change(function () {
        if (this.checked) {
            $(".hideWhenSelect").hide();
            $("#PolicyHolderSSN").removeClass("mandatoryField");
            $("#PolicyHolderName").removeClass("mandatoryField");
            $("#PolicyHolderLastName").removeClass("mandatoryField");
            $("#PolicyHolderAddress").removeClass("mandatoryField");
            $("#PolicyHolderSSN").removeClass("mandatoryField");
            $("#PolicyHolderPostalCode").removeClass("mandatoryField");
            $("#PolicyHolderBirthDate").removeClass("mandatoryField");
            $("#PolicyHolderPassportNumber_ID").removeClass("mandatoryField");
            $("#PolicyHolderEmail").removeClass("mandatoryField");
            $("#PolicyHolderPhoneNumber").removeClass("mandatoryField");
            $("#PolicyHolderCity").removeClass("mandatoryField");
        }
        else {
            $(".hideWhenSelect").show();
        }
    });
    $("#UseExistingDataForUser").on('click', function () {
        console.log("Here");
        $("input:checkbox[id='IsExistentPolicyHolder']").prop('checked', true);
        $(".hideWhenSelect").hide();
    });

    $("#PolicyHolderSSN").on('change paste', function () {
        if ($("#IsExistentPolicyHolder").is(':checked')) {
            $.ajax({
                type: "GET",
                url: "/Policy/GetExistentInsuredUserData?ssn=" + $("#PolicyHolderSSN").val(),
                success: function (result) {
                    var rez = JSON.parse(result);
                    if (rez.response == "User with that SSN not found") {
                        $("#ErrorPolicyHolderSSN").text("@InsuredTraveling.Resource.SSNNotFoundMsg");
                        $("input:checkbox[id='IsExistentPolicyHolder']").attr('checked', false);
                        $(".hideWhenSelect").show();
                    } else {
                        $("#ErrorPolicyHolderSSN").text("");
                    }
                },
                error: function () {

                }
            });
        } else {
            $.ajax({
                type: "GET",
                url: "/Policy/GetExistentInsuredUserData?ssn=" + $("#PolicyHolderSSN").val(),
                success: function (result) {
                    var rez = JSON.parse(result);
                    if (rez.response == "User with that SSN not found") {
                        $("#ErrorPolicyHolderSSN").text("");
                    } else {
                        $("#modal").modal("show");
                        $("#ErrorPolicyHolderSSN").text("");
                    }
                },
                error: function () {

                }
            });
        }
    });

    $("#IsSamePolicyHolderInsuredAdmin").change(function () {
        if ($("#IsSamePolicyHolderInsuredAdmin").is(':checked')) {
            if ($("#IsExistentPolicyHolder").is(':checked')) {
                $.ajax({
                    type: "GET",
                    url: "/Policy/GetExistentInsuredUserData?ssn=" + $("#PolicyHolderSSN").val(),
                    success: function (result) {
                        var rez = JSON.parse(result);
                        if (rez.response == "User with that SSN not found") {
                            $("#ErrorPolicyHolderSSN").text("@InsuredTraveling.Resource.SSNNotFoundMsg");
                            $("input:checkbox[id='IsExistentPolicyHolder']").attr('checked', false);
                            $(".hideWhenSelect").show();
                        }
                        else {
                            $("#Name").val(rez.InsuredData.FirstName);
                            $("#LastName").val(rez.InsuredData.Name);
                            $("#Address").val(rez.InsuredData.Address);
                            $("#City").val(rez.InsuredData.City);
                            $("#PostalCode").val(rez.InsuredData.PostalCode);
                            $("#SSN").val(rez.InsuredData.Ssn);
                            $("#BirthDate").val(rez.InsuredData.DateBirth);
                            $("#PassportNumber_ID").val(rez.InsuredData.PassportID);
                            $("#Email").val(rez.InsuredData.Email);
                            $("#PhoneNumber").val(rez.InsuredData.PhoneNumber);
                        }
                    }
                });
            } else {
                $("#Name").val($("#PolicyHolderName").val());
                $("#LastName").val($("#PolicyHolderLastName").val());
                $("#Address").val($("#PolicyHolderAddress").val());
                $("#City").val($("#PolicyHolderCity").val());
                $("#PostalCode").val($("#PolicyHolderPostalCode").val());
                $("#SSN").val($("#PolicyHolderSSN").val());
                $("#BirthDate").val($("#PolicyHolderBirthDate").val());
                $("#PassportNumber_ID").val($("#PolicyHolderPassportNumber_ID").val());
                $("#Email").val($("#PolicyHolderEmail").val());
                $("#PhoneNumber").val($("#PolicyHolderPhoneNumber").val());
            }
        }
        else {
            $("#hideWhenSamePerson").show();
            $("#hideWhenSamePerson .form-control").prop('readonly', false);
            $(".insuredData").val("");

        }
    });

    $("#IsSamePolicyHolderInsured").change(function () {
        if ($("#IsSamePolicyHolderInsured").is(":checked")) {
            $.ajax({
                type: "GET",
                url: "/Policy/GetExistentLoggedInUserData",
                success: function (result) {
                    var rez = JSON.parse(result);
                    $("#Name").val(rez.InsuredData.FirstName);
                    $("#LastName").val(rez.InsuredData.Name);
                    $("#Address").val(rez.InsuredData.Address);
                    $("#City").val(rez.InsuredData.City);
                    $("#PostalCode").val(rez.InsuredData.PostalCode);
                    $("#SSN").val(rez.InsuredData.Ssn);
                    $("#BirthDate").val(rez.InsuredData.DateBirth);
                    $("#PassportNumber_ID").val(rez.InsuredData.PassportID);
                    $("#Email").val(rez.InsuredData.Email);
                    $("#PhoneNumber").val(rez.InsuredData.PhoneNumber);
                }
            });

            $("#SSN").prop('readonly', true);
        }
        else {
            $("#hideWhenSamePerson").show();
            $("#hideWhenSamePerson .form-control").prop('readonly', false);
            $(".insuredData").val("");

        }
    });


    $('#PolicyPolicyInformation').click(function () {
        $("#PolicyPolicyInformationContent").toggle();

    });
    $('#HolderInformation').click(function () {
        $("#HolderInformationContent").toggle();

    });
    $('#InsuredInformation').click(function () {
        $("#InsuredInformationContent").toggle();

    });
    $('#PolicyData').click(function () {
        $("#PolicyDataContent").toggle();

    });

    function ChangeType() {
        var v = $("#CountryID option:selected").val();
        console.log(v);
        if (v == 3) {
            $("#policy_type option[value='2']").prop("selected", true);
            $("#policy_type option[value='3']").hide();
            $("#policy_type option[value='4']").show();
            $("#policy_type option[value='5']").hide();
        } else if (v == 2) {
            $("#policy_type option[value='5']").hide();
            $("#policy_type option[value='2']").prop("selected", true);
            $("#policy_type option[value='3']").show();
            $("#policy_type option[value='4']").hide();
        } else if (v == 1) {
            $("#policy_type option[value='5']").hide();
            $("#policy_type option[value='2']").prop("selected", true);
            $("#policy_type option[value='3']").show();
            $("#policy_type option[value='4']").hide();
        } else if (v == 4) {
            $("#policy_type option[value='5']").show();
            $("#policy_type option[value='2']").prop("selected", true);
            $("#policy_type option[value='3']").hide();
            $("#policy_type option[value='4']").hide();
        }

    }

    // Check the user's location
    function getLocation() {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(showPosition);
        } else {
            x.innerHTML = "Geolocation is not supported by this browser.";
        }
    }

    function showPosition(position) {
        //  x.innerHTML = "Latitude: " + position.coords.latitude +
        //  "<br>Longitude: " + position.coords.longitude;
        $.getJSON('http://ws.geonames.org/countryCode', {
            lat: position.coords.latitude,
            lng: position.coords.longitude,
            type: 'JSON',
            username: 'demo'
        }, function (result) {
            console.log(result.countryName);
            /* Location not allowed na Chrome, treba da se podesi vo Advanced settings */
            result.countryName = "Macedonia";
            console.log(result.countryName);
            if (result.countryName == "Macedonia") {
                var submitBtn = document.getElementById("buyPolicyBtn");

                submitBtn.setAttribute("formmethod", "post");
                submitBtn.setAttribute("formaction", "/Payment/Index");
                submitBtn.setAttribute("type", "submit");
            }
            else {
                console.log(1);
                $("#locationError").text("Не може да купите полиса ако сте надвор од Македонија!");
                $("#locationError").css("display", "none"); //block
                $("#buyPolicyBtn").prop('disabled', true);
            }
        });
    }

    $('#Valid_Days').focusout(function () {
        var validDays = $("#Valid_Days").val();

        function addDays(date, days) {

            var result = new Date(date);

            result.setDate(result.getDate() + parseInt(days));
            return result;
        }

        var startDateParts = $("#Start_Date").val().split("/");
        var startDate = new Date(startDateParts[2], startDateParts[1] - 1, startDateParts[0]);

        var endDateParts = $("#End_Date").val().split("/");
        var endDate = new Date(endDateParts[2], endDateParts[1] - 1, endDateParts[0]);

        var startDate1 = new Date(startDate);
        var endDate1 = new Date(endDate);

        if (validDays != null || validDays != " ") {
            var oneDay = 24 * 60 * 60 * 1000;

            var diffDays = Math.round(Math.abs((endDate1.getTime() - startDate1.getTime()) / (oneDay)));

            if (diffDays < validDays - 1) {
                $("#modalHolder").modal("show");
            }

        }

        $('#ChangeDate').click(function () {
            var res = addDays(startDate, validDays);

            var day = res.getDate();
            var monthIndex = res.getMonth();
            var year = res.getFullYear();

            var date = day - 1 + '/' + parseInt(monthIndex + 1) + '/' + year;

            $("#End_Date").val(date);

        });


    });

</script>