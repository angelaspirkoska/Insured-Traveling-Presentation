@model InsuredTraveling.Models.Policy
@using InsuredTraveling.Filters;
@using System.Web.Optimization;
@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>@InsuredTraveling.Resource.Policy_CreatePolicy</h2>
<form id="policy_form" metod="post">
    <div class="form-horizontal">
        <hr />
        <div class="row container">
            <header class="well">@InsuredTraveling.Resource.Policy_PolicyInformation</header>
            <div class="form-inline row col-sm-12">

                <div class="form-group">
                    @Html.LabelFor(model => model.CountryID, htmlAttributes: new { @class = "control-label" })
                    <div class="inputs-spacing">
                        @Html.DropDownListFor(model => model.CountryID, (List<SelectListItem>)ViewBag.Countries, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.CountryID, "", new { @class = "text-danger" })
                    </div>
                    @Html.LabelFor(model => model.Retaining_RiskID, htmlAttributes: new { @class = "control-label" })
                    <div class="inputs-spacing">
                        @Html.DropDownListFor(model => model.Retaining_RiskID, (List<SelectListItem>)ViewBag.Franchise, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Retaining_RiskID, "", new { @class = "text-danger" })
                    </div>
                    @Html.LabelFor(model => model.Policy_TypeID, htmlAttributes: new { @class = "control-label" })
                    <div class="inputs-spacing">
                        @Html.DropDownListFor(model => model.Policy_TypeID, (List<SelectListItem>)ViewBag.TypeOfPolicy, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Policy_TypeID, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
        </div>
        <div class="form-inline row">
            <div class="form-group col-sm-12">
                @Html.LabelFor(model => model.Travel_NumberID, htmlAttributes: new { @class = "control-label" })
                <div class="checkbox-container">
                    <label class="radio-inline ">
                        <input type="radio" name="Travel_NumberID" checked="checked" value="1" class="numberTrips" />
                        @*@Html.RadioButtonFor(model => model.Travel_NumberID, "true", new { @value = "1", @text = "Едно патување" })*@
                        <label for="radio1" checked="checked">@InsuredTraveling.Resource.Policy_OneTrip</label>
                    </label>
                    <br />
                    <label class="radio-inline">
                        <input type="radio" name="Travel_NumberID" value="2"  class="numberTrips"/>
                        @*@Html.RadioButtonFor(model => model.Travel_NumberID, "true", new { @value = "2", @text = "Повеќе патувања" })*@
                        <label for="radio1">@InsuredTraveling.Resource.Policy_MoreTrip</label>
                    </label>
                </div>
            </div>
        </div>
        <div class="form-inline row">
            <input type="hidden" id="todayDate" name="todayDate" value="@ViewBag.Date">
            <div class="form-group col-sm-3">
                @Html.LabelFor(model => model.Start_Date, htmlAttributes: new { @class = "control-label"})
                <div class="inputs-spacing">
                    @Html.EditorFor(model => model.Start_Date, "{0:dd/MM/yyyy}", new { htmlAttributes = new { @class = "form-control input-sm placeholder mandatoryField" } })
                    @Html.ValidationMessageFor(model => model.Start_Date, "", new { @class = "text-danger" })
                </div>
                <input type="hidden" id="inTenDays" name="inTenDays" value="@ViewBag.DateAfterTenDays">
                @Html.LabelFor(model => model.End_Date, htmlAttributes: new { @class = "control-label" })
                <div class="inputs-spacing">
                    @Html.EditorFor(model => model.End_Date, new { htmlAttributes = new { @class = "form-control input-sm placeholder mandatoryField" } })
                    @Html.ValidationMessageFor(model => model.End_Date, "", new { @class = "text-danger" })
                </div>

                @Html.LabelFor(model => model.Valid_Days, htmlAttributes: new { @class = "control-label" })
                    <div class="input-group">
                        @Html.EditorFor(model => model.Valid_Days, new { htmlAttributes = new { @class = "form-control input-sm mandatoryField", @style= "position: static;", @min = "1" } })
                        <span class="input-group-addon">@InsuredTraveling.Resource.Policy_Days</span>
                    </div>
                    @Html.ValidationMessageFor(model => model.Valid_Days, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>
    <br />
    <br />
    @{
        RoleAuthorize r = new RoleAuthorize();
    }

    @if (r.IsUser("admin"))
    {
        <div class="row container">
            <header class="well">@InsuredTraveling.Resource.Policy_HolderInformation</header>
            <div class="form-inline row">
                <div class="form-group col-sm-3">
                    <div class="inputs-spacing">
                        @Html.CheckBoxFor(model => model.IsExistentPolicyHolder, new { @class = "col-md-1", @style = "" }) @InsuredTraveling.Resource.Policy_ExistingUser
                    </div>
                    <div class="hideWhenSelect">
                        @Html.LabelFor(model => model.PolicyHolderName, htmlAttributes: new { @class = "control-label" })
                        <div class="inputs-spacing">
                            @Html.EditorFor(model => model.PolicyHolderName, new { htmlAttributes = new { @class = "form-control mandatoryField" } })
                            @Html.ValidationMessageFor(model => model.PolicyHolderName, "", new { @class = "text-danger" })
                        </div>

                        @Html.LabelFor(model => model.PolicyHolderLastName, htmlAttributes: new { @class = "control-label" })
                        <div class="inputs-spacing">
                            @Html.EditorFor(model => model.PolicyHolderLastName, new { htmlAttributes = new { @class = "form-control mandatoryField", } })
                            @Html.ValidationMessageFor(model => model.PolicyHolderLastName, "", new { @class = "text-danger" })
                        </div>

                        @Html.LabelFor(model => model.PolicyHolderAddress, htmlAttributes: new { @class = "control-label" })
                        <div class="inputs-spacing">
                            @Html.EditorFor(model => model.PolicyHolderAddress, new { htmlAttributes = new { @class = "form-control mandatoryField" } })
                            @Html.ValidationMessageFor(model => model.PolicyHolderAddress, "", new { @class = "text-danger" })
                        </div>

                        @Html.LabelFor(model => model.PolicyHolderCity, htmlAttributes: new { @class = "control-label" })
                        <div class="inputs-spacing">
                            @Html.EditorFor(model => model.PolicyHolderCity, new { htmlAttributes = new { @class = "form-control mandatoryField", } })
                            @Html.ValidationMessageFor(model => model.PolicyHolderCity, "", new { @class = "text-danger" })
                        </div>
                        @Html.LabelFor(model => model.PolicyHolderPostalCode, htmlAttributes: new { @class = "control-label" })
                        <div class="inputs-spacing">
                            @Html.EditorFor(model => model.PolicyHolderPostalCode, new { htmlAttributes = new { @class = "form-control mandatoryField" } })
                            @Html.ValidationMessageFor(model => model.PolicyHolderPostalCode, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    @Html.LabelFor(model => model.PolicyHolderSSN, htmlAttributes: new { @class = "control-label" })
                    <div class="inputs-spacing">
                        @Html.EditorFor(model => model.PolicyHolderSSN, new { htmlAttributes = new { @class = "form-control mandatoryField" } })
                        @Html.ValidationMessageFor(model => model.PolicyHolderSSN, "", new { @class = "text-danger" })
                    </div>
                    <div class="hideWhenSelect">

                        @Html.LabelFor(model => model.PolicyHolderBirthDate, htmlAttributes: new { @class = "control-label" })
                        <div class="inputs-spacing">
                            @Html.EditorFor(model => model.PolicyHolderBirthDate, new { htmlAttributes = new { @class = "form-control input-sm placeholder mandatoryField", type = "date", @max = ViewBag.Date } })
                            @Html.ValidationMessageFor(model => model.PolicyHolderBirthDate, "", new { @class = "text-danger" })
                        </div>


                        @Html.LabelFor(model => model.PolicyHolderPassportNumber_ID, htmlAttributes: new { @class = "control-label" })
                        <div class="inputs-spacing">
                            @Html.EditorFor(model => model.PolicyHolderPassportNumber_ID, new { htmlAttributes = new { @class = "form-control mandatoryField" } })
                            @Html.ValidationMessageFor(model => model.PolicyHolderPassportNumber_ID, "", new { @class = "text-danger" })
                        </div>

                        @Html.LabelFor(model => model.PolicyHolderEmail, htmlAttributes: new { @class = "control-label" })
                        <div class="inputs-spacing">
                            @Html.EditorFor(model => model.PolicyHolderEmail, new { htmlAttributes = new { @class = "form-control mandatoryField" } })
                            @Html.ValidationMessageFor(model => model.PolicyHolderEmail, "", new { @class = "text-danger" })
                        </div>
                        @Html.LabelFor(model => model.PolicyHolderPhoneNumber, htmlAttributes: new { @class = "control-label" })
                        <div class="inputs-spacing">
                            @Html.EditorFor(model => model.PolicyHolderPhoneNumber, new { htmlAttributes = new { @class = "form-control  mandatoryField", } })
                            @Html.ValidationMessageFor(model => model.PolicyHolderPhoneNumber, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
    <div class="row container">
        <header class="well">@InsuredTraveling.Resource.Policy_InsuredInformation</header>
        <div class="form-inline row">
            <div class="form-group col-sm-3">
                <div class="inputs-spacing">
                    @Html.CheckBoxFor(model => model.IsSamePolicyHolderInsured, new { @class = "col-md-1", @style = "" })

                    @if (r.IsUser("end user"))
                    {
                        <label>@InsuredTraveling.Resource.Policy_IamInsured</label>
                    }
                    @if (r.IsUser("admin"))
                    {
                        <label>@InsuredTraveling.Resource.Policy_HolderSameInsured</label>
                    }
                    </ div >
                    <div id="hideWhenSamePerson">
                        @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label" })
                        <div class="inputs-spacing">
                            @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control mandatoryField insuredData" } })
                            @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                        </div>

                        @Html.LabelFor(model => model.LastName, htmlAttributes: new { @class = "control-label" })
                        <div class="inputs-spacing">
                            @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control mandatoryField insuredData", } })
                            @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
                        </div>

                        @Html.LabelFor(model => model.Address, htmlAttributes: new { @class = "control-label" })
                        <div class="inputs-spacing">
                            @Html.EditorFor(model => model.Address, new { htmlAttributes = new { @class = "form-control mandatoryField insuredData", } })
                            @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
                        </div>
                        @Html.LabelFor(model => model.City, htmlAttributes: new { @class = "control-label" })
                        <div class="inputs-spacing">
                            @Html.EditorFor(model => model.City, new { htmlAttributes = new { @class = "form-control mandatoryField insuredData", } })
                            @Html.ValidationMessageFor(model => model.City, "", new { @class = "text-danger" })
                        </div>
                        @Html.LabelFor(model => model.PostalCode, htmlAttributes: new { @class = "control-label" })
                        <div class="inputs-spacing">
                            @Html.EditorFor(model => model.PostalCode, new { htmlAttributes = new { @class = "form-control mandatoryField insuredData", } })
                            @Html.ValidationMessageFor(model => model.PostalCode, "", new { @class = "text-danger" })
                        </div>

                        @Html.LabelFor(model => model.SSN, htmlAttributes: new { @class = "control-label" })
                        <div class="inputs-spacing">
                            @Html.EditorFor(model => model.SSN, new { htmlAttributes = new { @class = "form-control mandatoryField insuredData" } })
                            @Html.ValidationMessageFor(model => model.SSN, "", new { @class = "text-danger" })
                        </div>

                        @Html.LabelFor(model => model.BirthDate, htmlAttributes: new { @class = "control-label" })
                        <div class="inputs-spacing">
                            @Html.EditorFor(model => model.BirthDate, new { htmlAttributes = new { @class = "form-control input-sm placeholder mandatoryField insuredData" } })
                            @Html.ValidationMessageFor(model => model.BirthDate, "", new { @class = "text-danger" })
                        </div>
                        @Html.LabelFor(model => model.PassportNumber_ID, htmlAttributes: new { @class = "control-label" })
                        <div class="inputs-spacing">
                            @Html.EditorFor(model => model.PassportNumber_ID, new { htmlAttributes = new { @class = "form-control mandatoryField insuredData" } })
                            @Html.ValidationMessageFor(model => model.PassportNumber_ID, "", new { @class = "text-danger" })
                        </div>

                        @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label" })
                        <div class="inputs-spacing">
                            @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control mandatoryField insuredData" } })
                            @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                        </div>

                        @Html.LabelFor(model => model.PhoneNumber, htmlAttributes: new { @class = "control-label" })
                        <div class="inputs-spacing">
                            @Html.EditorFor(model => model.PhoneNumber, new { htmlAttributes = new { @class = "form-control mandatoryField insuredData" } })
                            @Html.ValidationMessageFor(model => model.PhoneNumber, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <br />
        <br />
        <div class="row container">
            <header class="well">@InsuredTraveling.Resource.Policy_PolicyData</header>
            <div class="form-inline row">
                <div class="form-group col-sm-12">
                    @Html.LabelFor(model => model.Travel_Insurance_TypeID, htmlAttributes: new { @class = "control-label" })
                    <div class="checkbox-container">
                        <label class="radio-inline ">
                            <input type="radio" checked="checked" name="Travel_Insurance_TypeID" , value="1" id="single_type" />
                            @*@Html.RadioButtonFor(model => model.Travel_Insurance_TypeID, "true", new { @value = "1", id = "single_type" })*@
                            <label for="radio1" checked="checked">@InsuredTraveling.Resource.Policy_PolicySingle</label>
                        </label>
                        <br />
                        <label class="radio-inline">
                            <input type="radio" name="Travel_Insurance_TypeID" , value="2" id="family_type" />
                            @*@Html.RadioButtonFor(model => model.Travel_Insurance_TypeID, "true", new { @value = "2", id = "family_type" })*@
                            <label for="radio1">@InsuredTraveling.Resource.Policy_PolicyFamily</label>
                        </label>
                        <br />
                        <label class="radio-inline">
                            <input type="radio" name="Travel_Insurance_TypeID" , value="3" id="group_type" />
                            @*@Html.RadioButtonFor(model => model.Travel_Insurance_TypeID, "true", new { @value = "3", id = "group_type" })*@
                            <label for="radio1">@InsuredTraveling.Resource.Policy_PolicyGroup</label>
                        </label>
                    </div>
                </div>
            </div>
            <div class="form-horizontal" id="family" hidden>
                @for (int i = 0; i < 6; i++)
                {
                    <div class="form-inline row" style="margin-top:20px;">
                        <div class="form-group col-sm-3">
                            <div><label style="width:40%">@InsuredTraveling.Resource.Policy_InsuredName:</label></div>
                            @Html.EditorFor(model => model.insureds[i].Name, new { htmlAttributes = new { @class = "form-control input-sm", } })
                        </div>
                        <div class="form-group col-sm-3">
                            <div><label>@InsuredTraveling.Resource.Policy_InsuredLastName:</label></div>
                            @Html.EditorFor(model => model.insureds[i].Lastname, new { htmlAttributes = new { @class = "form-control input-sm", } })
                        </div>
                        <div class="form-group col-sm-3">
                            <div><label>@InsuredTraveling.Resource.Policy_InsuredSSN:</label></div>
                            @Html.EditorFor(model => model.insureds[i].SSN, new { htmlAttributes = new { @class = "form-control input-sm", } })
                        </div>
                    </div>
                }

            </div>
            <div class="form-horizontal row" id="group" hidden>
                <div class="form-group col-sm-3">
                    @Html.LabelFor(model => model.Group_Members, htmlAttributes: new { @class = "control-label" })
                    <div class="inputs-spacing">
                        @Html.EditorFor(model => model.Group_Members, new { htmlAttributes = new { @class = "form-control input-sm" } })
                        @Html.ValidationMessageFor(model => model.Group_Members, "", new { @class = "text-danger" })
                    </div>
                    @Html.LabelFor(model => model.Group_Total_Premium, htmlAttributes: new { @class = "control-label" })
                    <div class="inputs-spacing">
                        @Html.EditorFor(model => model.Group_Total_Premium, new { htmlAttributes = new { @class = "form-control input-sm" } })
                        @Html.ValidationMessageFor(model => model.Group_Total_Premium, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
            <div class="form-horizontal row">
                @for (int i = 0; i < 2; i++)
                {
                    <div class="form-group col-sm-6">
                        <div><label>@InsuredTraveling.Resource.Policy_AddOn @(i + 1)</label></div>
                        <div>
                            @Html.DropDownListFor(model => model.additional_charges[i].ID, (List<SelectListItem>)ViewBag.additional_charges, new { @class = "form-control" })
                        </div>
                    </div>
                }
            </div>
            <br />
            <br />
            <div class="form-inline row">
                <div class="form-group col-sm-3 col-md-3">
                    <div>
                        <input type="button" id="calculateTotalPremium" value="@InsuredTraveling.Resource.Policy_CalculatePremium" class="btn btn-default" onclick="CalculateTotalPremium()" />
                    </div>
                </div>
                @*<div class="form-group col-sm-4" style="padding-left:0px;">
                   @Html.LabelFor(model => model.Total_Premium, htmlAttributes: new { @class = "control-label col-md-5", @id="totalPremiumLabel" })
                    <div class="col-md-6">
                        <div class="input-group">
                            @Html.EditorFor(model => model.Total_Premium, new { htmlAttributes = new { @class = "", style = "border:none; font-size:24px; color:red; font-weight:bold;", id = "totalPremium", @readonly = "true" } })

                        </div>
                    </div>
                </div>
                <div class="form-group">
                    <label id="errorMessage" style="color:red"></label>
                </div>*@
            </div>
        </div>
        <br />
        <br />
        <div class="col-md-6">
            <div class="form-group col-sm-4 col-md-4 totalPremium" >
                @Html.LabelFor(model => model.Total_Premium, htmlAttributes: new { @class = "control-label col-md-5", @id = "totalPremiumLabel" })
                <div class="col-md-6">
                    <div class="input-group">
                        @Html.EditorFor(model => model.Total_Premium, new { htmlAttributes = new { @class = "", style = "width: 100px; border:none; font-size:24px; color:red; font-weight:bold;", id = "totalPremium", @readonly = "true" } })

                    </div>
                </div>
            </div>
            <div class="">
                <label id="errorMessage" style="color:red"></label>
            </div>
            <div class="col-sm-3 col-md-3">
                <div>
                    <input type="submit" value="@InsuredTraveling.Resource.Policy_BuyPolicy" class="btn btn-success hideMe customButton" @*onclick="@("window.location.href='" + @Url.Action("Index", "Payment", new { p = Model }) + "'");"*@ formmethod="post" formaction="/Payment/Index" />
                </div>
            </div>
        </div>
        <div class="form-inline row col-md-12">
            
            <div class="form-group col-sm-3 col-md-2" style="margin-left: 0px; padding-left: 0px;">
                <div>
                    <input type="button" value="@InsuredTraveling.Resource.Policy_AddOffer" class="btn btn-default hideMe" />
                </div>
            </div>
            <div class="form-group col-sm-3 col-md-8">
                <div>
                    <input type="button" onclick="@("window.location.href='" + @Url.Action("PrintPolicy", "Policy") + "'");" class="btn btn-default hideMe" value="@InsuredTraveling.Resource.Policy_PrintOffer" />
                </div>
            </div>
        </div>
    </div>
</form>

<script src="~/Scripts/jquery.validate.js"></script>
<script src="~/Scripts/additional-methods.js"></script>
<!-- macedonian language-->
<script src="~/Scripts/messages_is.js"></script>

@Scripts.Render("~/bundles/jqueryui")
@Styles.Render("~/Content/jqueryuicss")  

<script>
    $(document).ready(function () {
        $(".hideMe").hide();        
        $("#Start_Date").val($("#todayDate").val());
        $("#End_Date").val($("#inTenDays").val());
        $("#Valid_Days").val(10);
        $("#totalPremium").hide();
        $("#totalPremiumLabel").hide();
        $("#family").hide();
        $("#group").hide();

        $("#single_type").click(function () {
            $("#family").hide();
            $("#group").hide();
        });
        $("#family_type").click(function () {
            $("#family").show()
            $("#group").hide();
        });
        $("#group_type").click(function () {
            $("#family").hide();
            $("#group").show();
        });


        $("#CountryID").val(1);
        $("#Policy_TypeID").val(1);
        $("#Retaining_RiskID").val(2);

        $("#additional_charges_0__ID").val(1);
        $("#additional_charges_1__ID").val(1);

    });
   
    $(".mandatoryField, #Policy_TypeID, #Retaining_RiskID, #CountryID, .numberTrips, #additional_charges_1__ID, #additional_charges_0__ID, #single_type, #family_type, #group_type").on('change', function () {
        $(".hideMe").hide();
    })
    
    
    $(".input-sm, .text-box").keypress(function (event) {
        var ew = event.which;
        console.log(ew);
        if (ew == 32)
            return true;
        if (46 <= ew && ew <= 57)
            return true;
        if (64 <= ew && ew <= 90)
            return true;
        if (97 <= ew && ew <= 122)
            return true;
        return false;
    });


    function ValidateFields() {
        var flag = true;
        
        $.each($('.mandatoryField'), function () {
            if ($(this).val().length == "") {
                alert("foro" + this);
                console.log(this);
                flag = false;
            }
        });
        if ($("#Valid_Days").val() == 0)
            flag = false;
        return flag;
    }


    function CalculateTotalPremium() {
        
        var flag = ValidateFields();
        console.log(flag);
        if (flag) {
                    $.ajax({
                        type: "POST",
                        url: "@System.Configuration.ConfigurationManager.AppSettings["webpage_url"]/api/Premium/Calculate",
                        data: $("#policy_form").serialize(),
                        success: function (result) {
                            console.log(result.PremiumAmount);
                            $("#totalPremium").val(result.PremiumAmount);
                            $("#totalPremium").show();
                            $("#totalPremiumLabel").show();
                            $(".hideMe").show();
                            $("#errorMessage").text(" ");
                        },
                        error: function (result) {
                            $(".hideMe").hide();
                            $("#totalPremiumLabel").hide();
                            $("#totalPremium").val("");
                            $("#errorMessage").text((JSON.parse(result.responseText)).Message);
                        }
                    });
        }
        else {
                    $(".hideMe").hide();
                    $("#totalPremiumLabel").hide();
                    $("#totalPremium").val("");
                    if ($("#Valid_Days").val() == 0) {
                        $("#errorMessage").text("@InsuredTraveling.Resource.Policy_ValidDate");
                    }
                    else {
                        $("#errorMessage").text("@InsuredTraveling.Resource.Policy_FillData");
                    }
                    
        }

    }
    $('#dugme').on('submit', function (e) {
        if (!valid) {
            e.preventDefault();
        }
    });

    $("#policyForm").validate({
        rules: {
            EMBG: {
                required: true,
                number: true,
                minlength: 13,
                maxlength: 13
            },
            osigurenik1MaticenBroj: {
                required: true,
                number: true,
                minlength: 13,
                maxlength: 13
            }
        }
    });
    jQuery.validator.setDefaults({
        debug: true,
        success: "valid",

    });
    var form = $("#policyForm");
    form.validate({

        lang: 'is'

    });

    $("#dugme").click(function () {
        if (form.valid() == true) {
            var data = $("#policyForm").serialize();
            $.ajax({
                type: "POST",
                url: "CreatePolicy",
                data: data,
                success: function () {

                }
            });
        }
    });

    $("#Start_Date").datepicker({
        dateFormat: "mm/dd/yy",
        onSelect: function (selected) {
            $("#End_Date").datepicker("option", "minDate", selected);
        },
    });

    $("#End_Date").datepicker({
        dateFormat: "mm/dd/yy",
        onSelect: function (selected) {
            $("#Start_Date").datepicker("option", "maxDate", selected);
        },
    });

    $("#BirthDate").datepicker({
        dateFormat: "mm/dd/yy",
        onSelect: function (selected) {
        },
    });

    $("#vaziDenovi").focusin(function () {
        var Sdat = new Date($("#startDate").val());
        var Edat = new Date($("#endDate").val());
        if ($('#povekePatuvanja').is(':checked')) {
            $("#vaziDenovi").attr('min', 15);
        }
        else {
            $("#vaziDenovi").attr('min', 2);
        }

    });

    $("#SSN").keydown(function (e) {
        if ($.inArray(e.keyCode, [46, 8, 9, 27, 13, 110, 190]) !== -1 ||
            (e.keyCode === 65 && (e.ctrlKey === true || e.metaKey === true)) ||
            (e.keyCode >= 35 && e.keyCode <= 40)) {
            return;
        }
        if ((e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) && (e.keyCode < 96 || e.keyCode > 105)) {
            e.preventDefault();
        }
    });


    $("#IsExistentPolicyHolder").change(function () {
        if (this.checked) {
            $(".hideWhenSelect").hide();
        }
        else {
            $(".hideWhenSelect").show();
        }
    });

    $("#IsSamePolicyHolderInsured").change(function () {
        if (this.checked) {
            // $("#hideWhenSamePerson").hide();
           // $("#hideWhenSamePerson .form-control").prop('readonly', true);
            $.ajax({
                type: "GET",
                url: "/Policy/GetExistentLoggedInUserData",
                success: function (result) {
                    var rez = JSON.parse(result);
                    console.log(rez);
                    $("#Name").attr("value", rez.InsuredData.FirstName);
                    $("#LastName").attr("value", rez.InsuredData.Name);
                    $("#Address").attr("value", rez.InsuredData.Address);
                    $("#City").attr("value", rez.InsuredData.City);
                    $("#PostalCode").attr("value", rez.InsuredData.PostalCode);
                    $("#SSN").attr("value", rez.InsuredData.Ssn);
                    $("#BirthDate").attr("value", rez.InsuredData.DateBirth);
                    $("#PassportNumber_ID").attr("value", rez.InsuredData.PassportID);
                    $("#Email").attr("value", rez.InsuredData.Email);
                    $("#PhoneNumber").attr("value", rez.InsuredData.PhoneNumber);
                }
            });
        }
        else {
            $("#hideWhenSamePerson").show();
            $("#hideWhenSamePerson .form-control").prop('readonly', false);
            $(".insuredData").val("");

        }
    });
</script>