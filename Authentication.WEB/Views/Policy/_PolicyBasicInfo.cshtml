@model InsuredTraveling.Models.Policy
@using InsuredTraveling.Filters;
@using System.Web.Optimization;
@using System.Configuration;

@{
    var dateFormat = ConfigurationManager.AppSettings["DateFormat"].ToUpper();
    if (dateFormat.Count(x => x == 'Y') == 2)
    {
        dateFormat = dateFormat.Replace("YY", "YYYY");
    }
    var policyTypeSava = ViewBag.Category ?? 1;
    var insuredNumber = ViewBag.PersonsNum ?? 1;
    var validDays = ViewBag.Days ?? 1;
}

<div class="form-group text-left">
    <h4>Вид</h4>
</div>
<div class="panel">
    <div class="panel-body">
        <div class="form-group">
            <label class="control-label pull-left">Пакет</label>
            <div class="selectContainer">
                <select id="policyPackageType" name="policyPackageType" class="form-control" title="Одбери">
                    <option value="1">Gold</option>
                    <option value="2">Platinum</option>
                    <option value="3">VIP</option>
                </select>
            </div>
        </div>
        <div class="form-group">
            <label class="control-label pull-left">Вид</label>
            <div class="selectContainer">
                <select id="policyTypeSava" name="policyTypeSava" class="form-control" title="Одбери">
                    <option value="1">Индивидуално</option>
                    <option value="2">Фамилијарно</option>
                    <option value="3">Студент</option>
                    <option value="4">Business</option>
                    <option value="5">Групно</option>
                </select>
            </div>
        </div>
        <div class="form-group">
            <label class="control-label pull-left">Број на лица</label>
            <div class="selectContainer">
                <select id="insuredNumber" name="insuredNumber" class="form-control" title="Одбери">
                    <option value="1">1</option>
                    <option value="2">2</option>
                    <option value="3">3</option>
                    <option value="4">4</option>
                    <option value="5">5</option>
                    <option value="6">6</option>
                    <option value="7">7</option>
                    <option value="8">8</option>
                    <option value="9">9</option>
                    <option value="10">10</option>
                </select>
            </div>
        </div>
        <div>
            <label class="control-label pull-left">Период на престој во странство</label><br><br>
            <div class="form-group">
                <div class="row">
                    <div class="col-sm-6">
                        <label class="radio-inline" style="padding-left: 5px;">
                            <input type="radio" checked name="durationType" value="0" />
                            Познат Термин
                        </label>
                    </div>
                    <div class="col-sm-6">
                        <label class="radio-inline" style="padding-left: 5px;">
                            <input type="radio" name="durationType" value="1" />
                            Отворен Период
                        </label>
                    </div>
                </div>
            </div>
            <div id="knownDurationContainer">
                <div class="form-group">
                    <div class="input-group">
                        @*@Html.EditorFor(model => model.Start_Date, "{0:" + @ConfigurationManager.AppSettings["DateFormat"].ToString() + "}", new { htmlAttributes = new { @class = "form-control input-sm placeholder mandatoryField policyInfo" } })*@
                        <input type="hidden" id="start-date" name="Start_Date" />
                        <input type="hidden" id="end-date" name="End_Date" />
                        <input type="text" class="form-control" id="policy-daterange" />
                        @Html.ValidationMessageFor(model => model.Start_Date, "", new { @class = "text-danger" })
                        <span class="input-group-addon">
                            <i class="fa fa-calendar"></i>
                        </span>
                    </div>
                </div>
            </div>
            <div hidden id="openDurationContainer">
                <div class="form-group">
                    <label class="control-label pull-left">Период</label>
                    <select id="openDurationPicker" name="openDurationPicker" class="form-control" title="Одбери">
                        <option value="6">6 месеци</option>
                        <option value="12">12 месеци</option>
                    </select>
                </div>
                <div id="openPeriodSix">
                    <div class="form-group">
                        <label class="control-label pull-left">Термини</label>
                        <select id="openPeriodSixDays" class="form-control" title="Одбери">
                            <option value="0">Одбери</option>
                            <option value="30">30</option>
                            <option value="60">60</option>
                            <option value="90">90</option>
                        </select>
                    </div>
                </div>
                <div hidden id="openPeriodTwelve">
                    <div class="form-group">
                        <label class="control-label pull-left">Термини</label>
                        <select id="openPeriodTwelveDays" class="form-control">
                            <option value="0">Одбери</option>
                            <option value="60">60</option>
                            <option value="90">90</option>
                            <option value="120">120</option>
                        </select>
                    </div>
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.Valid_Days, htmlAttributes: new { @class = "control-label" })
                <div class="input-group">
                    <input type="text" name="Valid_Days" id="Valid_Days" class="form-control input-sm mandatoryField policyInfo" style="position:static;" />
                    <span class="input-group-addon">@InsuredTraveling.Resource.Policy_Days</span>
                </div>
                @Html.ValidationMessageFor(model => model.Valid_Days, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>
</div>
<div id="insu-sum" class="well bg-primary follow-scroll" style="display: block; top: 440px;">
    <b>Патничко осигурување промо акција од <br><span>117,00&nbsp;ден</span></b>
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js"></script>

<script>

    (function($) {
        var element = $('.follow-scroll'),
            originalY = element.offset().top;

        // Space between element and top of screen (when scrolling)
        var topMargin = 120;

        // Should probably be set in CSS; but here just for emphasis
        element.css('position', 'relative');

        $(window).on('scroll', function(event) {
            var scrollTop = $(window).scrollTop();

            element.stop(false, false).animate({
                top: scrollTop < originalY
                        ? 0
                        : scrollTop - originalY + topMargin
            }, 300);
        });
    })(jQuery);

    $(function () {

        $("#policyPackageType").on("change", function() {
            var selectedType = $('#policyPackageType').find(":selected").text();
            $("#mainTitlePackage").html(selectedType);
            $("#detailsTitlePackage").html(selectedType);
        });

        $("#policyTypeSava").on("change", function(){
            var selectedType = $('#policyTypeSava').find(":selected").text();
            var selectedTypeValue = $('#policyTypeSava').find(":selected").val();
            $("#detailsTitlePolicyType").html(selectedType);
            if(selectedTypeValue == 2 || selectedTypeValue == 5) {
                $('#insuredNumber option[value=3]').prop('selected', true);
                $('#insuredNumber').trigger("change");

                $("#modalAlertTitle").html("Внимание");
                $("#modalAlertContent").html("Бројот на осигурани лица е променет во 3");
                $("#modalAlert").modal("show");
            }
        });

        $("#insuredNumber").on("change", function(){
            var insuredNumber = $('#insuredNumber').find(":selected").val();
            $("#detailsTitleInsuredNumber").html(insuredNumber);
            if(insuredNumber == 1) {
                $('#policyTypeSava option[value=1]').prop('selected', true);
                $('#policyTypeSava').trigger("change");

                $("#modalAlertTitle").html("Внимание");
                $("#modalAlertContent").html("Типот на осигурување е променет во Индивидуално");
                $("#modalAlert").modal("show");
            }

            $.ajax({
                url: "@System.Configuration.ConfigurationManager.AppSettings["webpage_url"]/Policy/GetInsuredPartial",
                data: {
                    numInsured: insuredNumber
                },
                success: function(result){
                    $("#InsuredInformationContent").html(result);
                }});
        });

        $("#policyTypeSava").val('@policyTypeSava');
        $("#insuredNumber").val('@insuredNumber');
        $("#Valid_Days").val(@validDays);

        $("#policy-daterange").daterangepicker({
            minDate: moment(),
            locale: {
                format: '@dateFormat'
            },
            startDate: moment(),
            endDate: moment().add(@validDays, 'days')
        });

        $('#policy-daterange').on('apply.daterangepicker', function (ev, picker) {
            var startDate = picker.startDate;
            $("#start-date").val(startDate.format('@dateFormat'));
            var endDate = picker.endDate;
            $("#end-date").val(endDate.format('@dateFormat'));
            var dateDiff = endDate.diff(startDate, 'days');
            $("#Valid_Days").val(dateDiff);
        });

        $("#openPeriodSixDays").on("change", function(){
            $("#Valid_Days").val($(this).val());
        });

        $("#openPeriodTwelveDays").on("change", function(){
            $("#Valid_Days").val($(this).val());
        });

        $("#openDurationPicker").on("change", function(){
            if($(this).val() == 6) {
                $("#openPeriodSix").show();
                $("#openPeriodTwelve").hide();
            } else {
                $("#openPeriodTwelve").show();
                $("#openPeriodSix").hide();
            }
        });

        $("input[name='durationType']").on("change", function(){
            if($(this).val() == 0) {
                $("#knownDurationContainer").show();
                $("#openDurationContainer").hide();

                var startDate = moment($("#start-date").val(), "DD-MM-YYYY");
                var endDate = moment($("#end-date").val(), "DD-MM-YYYY");
                if($("#start-date").val() == "") {
                    $("#Valid_Days").val(3);
                } else {
                    var dateDiff = endDate.diff(startDate, 'days');
                    $("#Valid_Days").val(dateDiff);
                }

                $("#Valid_Days").attr("readonly", false);
            } else {
                $("#openDurationContainer").show();
                $("#knownDurationContainer").hide();

                $("#Valid_Days").attr("readonly", true);
            }

            
        });

    })
</script>
